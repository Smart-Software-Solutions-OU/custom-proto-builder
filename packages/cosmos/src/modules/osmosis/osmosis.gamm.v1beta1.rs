// This file is @generated by prost-build.
/// ===================== MsgJoinPool
/// This is really MsgJoinPoolNoSwap
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgJoinPool {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(string, tag = "3")]
    pub share_out_amount: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub token_in_maxs: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for MsgJoinPool {
    const NAME: &'static str = "MsgJoinPool";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgJoinPool".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgJoinPool".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgJoinPoolResponse {
    #[prost(string, tag = "1")]
    pub share_out_amount: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub token_in: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for MsgJoinPoolResponse {
    const NAME: &'static str = "MsgJoinPoolResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgJoinPoolResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgJoinPoolResponse".into()
    }
}
/// ===================== MsgExitPool
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgExitPool {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(string, tag = "3")]
    pub share_in_amount: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub token_out_mins: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for MsgExitPool {
    const NAME: &'static str = "MsgExitPool";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgExitPool".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgExitPool".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgExitPoolResponse {
    #[prost(message, repeated, tag = "1")]
    pub token_out: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for MsgExitPoolResponse {
    const NAME: &'static str = "MsgExitPoolResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgExitPoolResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgExitPoolResponse".into()
    }
}
/// ===================== MsgSwapExactAmountIn
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSwapExactAmountIn {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub routes: ::prost::alloc::vec::Vec<
        super::super::poolmanager::v1beta1::SwapAmountInRoute,
    >,
    #[prost(message, optional, tag = "3")]
    pub token_in: ::core::option::Option<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    #[prost(string, tag = "4")]
    pub token_out_min_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgSwapExactAmountIn {
    const NAME: &'static str = "MsgSwapExactAmountIn";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgSwapExactAmountIn".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgSwapExactAmountIn".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSwapExactAmountInResponse {
    #[prost(string, tag = "1")]
    pub token_out_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgSwapExactAmountInResponse {
    const NAME: &'static str = "MsgSwapExactAmountInResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgSwapExactAmountInResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgSwapExactAmountInResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSwapExactAmountOut {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub routes: ::prost::alloc::vec::Vec<
        super::super::poolmanager::v1beta1::SwapAmountOutRoute,
    >,
    #[prost(string, tag = "3")]
    pub token_in_max_amount: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub token_out: ::core::option::Option<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for MsgSwapExactAmountOut {
    const NAME: &'static str = "MsgSwapExactAmountOut";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgSwapExactAmountOut".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgSwapExactAmountOut".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSwapExactAmountOutResponse {
    #[prost(string, tag = "1")]
    pub token_in_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgSwapExactAmountOutResponse {
    const NAME: &'static str = "MsgSwapExactAmountOutResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgSwapExactAmountOutResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgSwapExactAmountOutResponse".into()
    }
}
/// ===================== MsgJoinSwapExternAmountIn
/// TODO: Rename to MsgJoinSwapExactAmountIn
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgJoinSwapExternAmountIn {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(message, optional, tag = "3")]
    pub token_in: ::core::option::Option<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    /// repeated cosmos.base.v1beta1.Coin tokensIn = 5 [
    ///    (gogoproto.moretags) = "yaml:\"tokens_in\"",
    ///    (gogoproto.nullable) = false
    /// ];
    #[prost(string, tag = "4")]
    pub share_out_min_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgJoinSwapExternAmountIn {
    const NAME: &'static str = "MsgJoinSwapExternAmountIn";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgJoinSwapExternAmountIn".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgJoinSwapExternAmountIn".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgJoinSwapExternAmountInResponse {
    #[prost(string, tag = "1")]
    pub share_out_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgJoinSwapExternAmountInResponse {
    const NAME: &'static str = "MsgJoinSwapExternAmountInResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgJoinSwapExternAmountInResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgJoinSwapExternAmountInResponse".into()
    }
}
/// ===================== MsgJoinSwapShareAmountOut
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgJoinSwapShareAmountOut {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(string, tag = "3")]
    pub token_in_denom: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub share_out_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub token_in_max_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgJoinSwapShareAmountOut {
    const NAME: &'static str = "MsgJoinSwapShareAmountOut";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgJoinSwapShareAmountOut".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgJoinSwapShareAmountOut".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgJoinSwapShareAmountOutResponse {
    #[prost(string, tag = "1")]
    pub token_in_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgJoinSwapShareAmountOutResponse {
    const NAME: &'static str = "MsgJoinSwapShareAmountOutResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgJoinSwapShareAmountOutResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgJoinSwapShareAmountOutResponse".into()
    }
}
/// ===================== MsgExitSwapShareAmountIn
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgExitSwapShareAmountIn {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(string, tag = "3")]
    pub token_out_denom: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub share_in_amount: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub token_out_min_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgExitSwapShareAmountIn {
    const NAME: &'static str = "MsgExitSwapShareAmountIn";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgExitSwapShareAmountInResponse {
    #[prost(string, tag = "1")]
    pub token_out_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgExitSwapShareAmountInResponse {
    const NAME: &'static str = "MsgExitSwapShareAmountInResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgExitSwapShareAmountInResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgExitSwapShareAmountInResponse".into()
    }
}
/// ===================== MsgExitSwapExternAmountOut
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgExitSwapExternAmountOut {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(message, optional, tag = "3")]
    pub token_out: ::core::option::Option<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    #[prost(string, tag = "4")]
    pub share_in_max_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgExitSwapExternAmountOut {
    const NAME: &'static str = "MsgExitSwapExternAmountOut";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgExitSwapExternAmountOut".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgExitSwapExternAmountOut".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgExitSwapExternAmountOutResponse {
    #[prost(string, tag = "1")]
    pub share_in_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgExitSwapExternAmountOutResponse {
    const NAME: &'static str = "MsgExitSwapExternAmountOutResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MsgExitSwapExternAmountOutResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MsgExitSwapExternAmountOutResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "osmosis")]
pub mod msg_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn join_pool(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgJoinPool>,
        ) -> std::result::Result<
            tonic::Response<super::MsgJoinPoolResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Msg/JoinPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("osmosis.gamm.v1beta1.Msg", "JoinPool"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn exit_pool(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgExitPool>,
        ) -> std::result::Result<
            tonic::Response<super::MsgExitPoolResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Msg/ExitPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("osmosis.gamm.v1beta1.Msg", "ExitPool"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn swap_exact_amount_in(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSwapExactAmountIn>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSwapExactAmountInResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Msg/SwapExactAmountIn",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("osmosis.gamm.v1beta1.Msg", "SwapExactAmountIn"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn swap_exact_amount_out(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSwapExactAmountOut>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSwapExactAmountOutResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Msg/SwapExactAmountOut",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("osmosis.gamm.v1beta1.Msg", "SwapExactAmountOut"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn join_swap_extern_amount_in(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgJoinSwapExternAmountIn>,
        ) -> std::result::Result<
            tonic::Response<super::MsgJoinSwapExternAmountInResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Msg/JoinSwapExternAmountIn",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("osmosis.gamm.v1beta1.Msg", "JoinSwapExternAmountIn"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn join_swap_share_amount_out(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgJoinSwapShareAmountOut>,
        ) -> std::result::Result<
            tonic::Response<super::MsgJoinSwapShareAmountOutResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Msg/JoinSwapShareAmountOut",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("osmosis.gamm.v1beta1.Msg", "JoinSwapShareAmountOut"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn exit_swap_extern_amount_out(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgExitSwapExternAmountOut>,
        ) -> std::result::Result<
            tonic::Response<super::MsgExitSwapExternAmountOutResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Msg/ExitSwapExternAmountOut",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.gamm.v1beta1.Msg",
                        "ExitSwapExternAmountOut",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn exit_swap_share_amount_in(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgExitSwapShareAmountIn>,
        ) -> std::result::Result<
            tonic::Response<super::MsgExitSwapShareAmountInResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Msg/ExitSwapShareAmountIn",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("osmosis.gamm.v1beta1.Msg", "ExitSwapShareAmountIn"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "osmosis")]
pub mod msg_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MsgServer.
    #[async_trait]
    pub trait Msg: Send + Sync + 'static {
        async fn join_pool(
            &self,
            request: tonic::Request<super::MsgJoinPool>,
        ) -> std::result::Result<
            tonic::Response<super::MsgJoinPoolResponse>,
            tonic::Status,
        >;
        async fn exit_pool(
            &self,
            request: tonic::Request<super::MsgExitPool>,
        ) -> std::result::Result<
            tonic::Response<super::MsgExitPoolResponse>,
            tonic::Status,
        >;
        async fn swap_exact_amount_in(
            &self,
            request: tonic::Request<super::MsgSwapExactAmountIn>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSwapExactAmountInResponse>,
            tonic::Status,
        >;
        async fn swap_exact_amount_out(
            &self,
            request: tonic::Request<super::MsgSwapExactAmountOut>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSwapExactAmountOutResponse>,
            tonic::Status,
        >;
        async fn join_swap_extern_amount_in(
            &self,
            request: tonic::Request<super::MsgJoinSwapExternAmountIn>,
        ) -> std::result::Result<
            tonic::Response<super::MsgJoinSwapExternAmountInResponse>,
            tonic::Status,
        >;
        async fn join_swap_share_amount_out(
            &self,
            request: tonic::Request<super::MsgJoinSwapShareAmountOut>,
        ) -> std::result::Result<
            tonic::Response<super::MsgJoinSwapShareAmountOutResponse>,
            tonic::Status,
        >;
        async fn exit_swap_extern_amount_out(
            &self,
            request: tonic::Request<super::MsgExitSwapExternAmountOut>,
        ) -> std::result::Result<
            tonic::Response<super::MsgExitSwapExternAmountOutResponse>,
            tonic::Status,
        >;
        async fn exit_swap_share_amount_in(
            &self,
            request: tonic::Request<super::MsgExitSwapShareAmountIn>,
        ) -> std::result::Result<
            tonic::Response<super::MsgExitSwapShareAmountInResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct MsgServer<T: Msg> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Msg> MsgServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MsgServer<T>
    where
        T: Msg,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/osmosis.gamm.v1beta1.Msg/JoinPool" => {
                    #[allow(non_camel_case_types)]
                    struct JoinPoolSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgJoinPool>
                    for JoinPoolSvc<T> {
                        type Response = super::MsgJoinPoolResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgJoinPool>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::join_pool(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = JoinPoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Msg/ExitPool" => {
                    #[allow(non_camel_case_types)]
                    struct ExitPoolSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgExitPool>
                    for ExitPoolSvc<T> {
                        type Response = super::MsgExitPoolResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgExitPool>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::exit_pool(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ExitPoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Msg/SwapExactAmountIn" => {
                    #[allow(non_camel_case_types)]
                    struct SwapExactAmountInSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgSwapExactAmountIn>
                    for SwapExactAmountInSvc<T> {
                        type Response = super::MsgSwapExactAmountInResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgSwapExactAmountIn>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::swap_exact_amount_in(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SwapExactAmountInSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Msg/SwapExactAmountOut" => {
                    #[allow(non_camel_case_types)]
                    struct SwapExactAmountOutSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgSwapExactAmountOut>
                    for SwapExactAmountOutSvc<T> {
                        type Response = super::MsgSwapExactAmountOutResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgSwapExactAmountOut>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::swap_exact_amount_out(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SwapExactAmountOutSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Msg/JoinSwapExternAmountIn" => {
                    #[allow(non_camel_case_types)]
                    struct JoinSwapExternAmountInSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgJoinSwapExternAmountIn>
                    for JoinSwapExternAmountInSvc<T> {
                        type Response = super::MsgJoinSwapExternAmountInResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgJoinSwapExternAmountIn>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::join_swap_extern_amount_in(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = JoinSwapExternAmountInSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Msg/JoinSwapShareAmountOut" => {
                    #[allow(non_camel_case_types)]
                    struct JoinSwapShareAmountOutSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgJoinSwapShareAmountOut>
                    for JoinSwapShareAmountOutSvc<T> {
                        type Response = super::MsgJoinSwapShareAmountOutResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgJoinSwapShareAmountOut>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::join_swap_share_amount_out(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = JoinSwapShareAmountOutSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Msg/ExitSwapExternAmountOut" => {
                    #[allow(non_camel_case_types)]
                    struct ExitSwapExternAmountOutSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgExitSwapExternAmountOut>
                    for ExitSwapExternAmountOutSvc<T> {
                        type Response = super::MsgExitSwapExternAmountOutResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgExitSwapExternAmountOut>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::exit_swap_extern_amount_out(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ExitSwapExternAmountOutSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Msg/ExitSwapShareAmountIn" => {
                    #[allow(non_camel_case_types)]
                    struct ExitSwapShareAmountInSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgExitSwapShareAmountIn>
                    for ExitSwapShareAmountInSvc<T> {
                        type Response = super::MsgExitSwapShareAmountInResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgExitSwapShareAmountIn>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::exit_swap_share_amount_in(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ExitSwapShareAmountInSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Msg> Clone for MsgServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Msg> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Msg> tonic::server::NamedService for MsgServer<T> {
        const NAME: &'static str = "osmosis.gamm.v1beta1.Msg";
    }
}
/// MigrationRecords contains all the links between balancer and concentrated
/// pools
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MigrationRecords {
    #[prost(message, repeated, tag = "1")]
    pub balancer_to_concentrated_pool_links: ::prost::alloc::vec::Vec<
        BalancerToConcentratedPoolLink,
    >,
}
impl ::prost::Name for MigrationRecords {
    const NAME: &'static str = "MigrationRecords";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.MigrationRecords".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.MigrationRecords".into()
    }
}
/// BalancerToConcentratedPoolLink defines a single link between a single
/// balancer pool and a single concentrated liquidity pool. This link is used to
/// allow a balancer pool to migrate to a single canonical full range
/// concentrated liquidity pool position
/// A balancer pool can be linked to a maximum of one cl pool, and a cl pool can
/// be linked to a maximum of one balancer pool.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BalancerToConcentratedPoolLink {
    #[prost(uint64, tag = "1")]
    pub balancer_pool_id: u64,
    #[prost(uint64, tag = "2")]
    pub cl_pool_id: u64,
}
impl ::prost::Name for BalancerToConcentratedPoolLink {
    const NAME: &'static str = "BalancerToConcentratedPoolLink";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.BalancerToConcentratedPoolLink".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.BalancerToConcentratedPoolLink".into()
    }
}
/// =============================== Pool
/// Deprecated: please use the alternative in x/poolmanager
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl ::prost::Name for QueryPoolRequest {
    const NAME: &'static str = "QueryPoolRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryPoolRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryPoolRequest".into()
    }
}
/// Deprecated: please use the alternative in x/poolmanager
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolResponse {
    #[prost(message, optional, tag = "1")]
    pub pool: ::core::option::Option<::prost_types::Any>,
}
impl ::prost::Name for QueryPoolResponse {
    const NAME: &'static str = "QueryPoolResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryPoolResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryPoolResponse".into()
    }
}
/// =============================== Pools
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolsRequest {
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryPoolsRequest {
    const NAME: &'static str = "QueryPoolsRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryPoolsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryPoolsRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolsResponse {
    #[prost(message, repeated, tag = "1")]
    pub pools: ::prost::alloc::vec::Vec<::prost_types::Any>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryPoolsResponse {
    const NAME: &'static str = "QueryPoolsResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryPoolsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryPoolsResponse".into()
    }
}
/// =============================== NumPools
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryNumPoolsRequest {}
impl ::prost::Name for QueryNumPoolsRequest {
    const NAME: &'static str = "QueryNumPoolsRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryNumPoolsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryNumPoolsRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryNumPoolsResponse {
    #[prost(uint64, tag = "1")]
    pub num_pools: u64,
}
impl ::prost::Name for QueryNumPoolsResponse {
    const NAME: &'static str = "QueryNumPoolsResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryNumPoolsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryNumPoolsResponse".into()
    }
}
/// =============================== PoolType
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolTypeRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl ::prost::Name for QueryPoolTypeRequest {
    const NAME: &'static str = "QueryPoolTypeRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryPoolTypeRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryPoolTypeRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolTypeResponse {
    #[prost(string, tag = "1")]
    pub pool_type: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryPoolTypeResponse {
    const NAME: &'static str = "QueryPoolTypeResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryPoolTypeResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryPoolTypeResponse".into()
    }
}
/// =============================== CalcJoinPoolShares
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCalcJoinPoolSharesRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    #[prost(message, repeated, tag = "2")]
    pub tokens_in: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for QueryCalcJoinPoolSharesRequest {
    const NAME: &'static str = "QueryCalcJoinPoolSharesRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryCalcJoinPoolSharesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryCalcJoinPoolSharesRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCalcJoinPoolSharesResponse {
    #[prost(string, tag = "1")]
    pub share_out_amount: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub tokens_out: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for QueryCalcJoinPoolSharesResponse {
    const NAME: &'static str = "QueryCalcJoinPoolSharesResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryCalcJoinPoolSharesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryCalcJoinPoolSharesResponse".into()
    }
}
/// =============================== CalcExitPoolCoinsFromShares
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCalcExitPoolCoinsFromSharesRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    #[prost(string, tag = "2")]
    pub share_in_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryCalcExitPoolCoinsFromSharesRequest {
    const NAME: &'static str = "QueryCalcExitPoolCoinsFromSharesRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryCalcExitPoolCoinsFromSharesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryCalcExitPoolCoinsFromSharesRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCalcExitPoolCoinsFromSharesResponse {
    #[prost(message, repeated, tag = "1")]
    pub tokens_out: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for QueryCalcExitPoolCoinsFromSharesResponse {
    const NAME: &'static str = "QueryCalcExitPoolCoinsFromSharesResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryCalcExitPoolCoinsFromSharesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryCalcExitPoolCoinsFromSharesResponse".into()
    }
}
/// =============================== PoolParams
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolParamsRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl ::prost::Name for QueryPoolParamsRequest {
    const NAME: &'static str = "QueryPoolParamsRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryPoolParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryPoolParamsRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<::prost_types::Any>,
}
impl ::prost::Name for QueryPoolParamsResponse {
    const NAME: &'static str = "QueryPoolParamsResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryPoolParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryPoolParamsResponse".into()
    }
}
/// =============================== PoolLiquidity
/// Deprecated: please use the alternative in x/poolmanager
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalPoolLiquidityRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl ::prost::Name for QueryTotalPoolLiquidityRequest {
    const NAME: &'static str = "QueryTotalPoolLiquidityRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryTotalPoolLiquidityRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryTotalPoolLiquidityRequest".into()
    }
}
/// Deprecated: please use the alternative in x/poolmanager
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalPoolLiquidityResponse {
    #[prost(message, repeated, tag = "1")]
    pub liquidity: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for QueryTotalPoolLiquidityResponse {
    const NAME: &'static str = "QueryTotalPoolLiquidityResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryTotalPoolLiquidityResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryTotalPoolLiquidityResponse".into()
    }
}
/// =============================== TotalShares
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalSharesRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl ::prost::Name for QueryTotalSharesRequest {
    const NAME: &'static str = "QueryTotalSharesRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryTotalSharesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryTotalSharesRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalSharesResponse {
    #[prost(message, optional, tag = "1")]
    pub total_shares: ::core::option::Option<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for QueryTotalSharesResponse {
    const NAME: &'static str = "QueryTotalSharesResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryTotalSharesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryTotalSharesResponse".into()
    }
}
/// =============================== CalcJoinPoolNoSwapShares
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCalcJoinPoolNoSwapSharesRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    #[prost(message, repeated, tag = "2")]
    pub tokens_in: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for QueryCalcJoinPoolNoSwapSharesRequest {
    const NAME: &'static str = "QueryCalcJoinPoolNoSwapSharesRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryCalcJoinPoolNoSwapSharesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryCalcJoinPoolNoSwapSharesRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCalcJoinPoolNoSwapSharesResponse {
    #[prost(message, repeated, tag = "1")]
    pub tokens_out: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    #[prost(string, tag = "2")]
    pub shares_out: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryCalcJoinPoolNoSwapSharesResponse {
    const NAME: &'static str = "QueryCalcJoinPoolNoSwapSharesResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryCalcJoinPoolNoSwapSharesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryCalcJoinPoolNoSwapSharesResponse".into()
    }
}
/// QuerySpotPriceRequest defines the gRPC request structure for a SpotPrice
/// query.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySpotPriceRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    #[prost(string, tag = "2")]
    pub base_asset_denom: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub quote_asset_denom: ::prost::alloc::string::String,
}
impl ::prost::Name for QuerySpotPriceRequest {
    const NAME: &'static str = "QuerySpotPriceRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QuerySpotPriceRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QuerySpotPriceRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolsWithFilterRequest {
    /// String of the coins in single string separated by comma. Ex)
    /// 10uatom,100uosmo
    #[prost(string, tag = "1")]
    pub min_liquidity: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub pool_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryPoolsWithFilterRequest {
    const NAME: &'static str = "QueryPoolsWithFilterRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryPoolsWithFilterRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryPoolsWithFilterRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPoolsWithFilterResponse {
    #[prost(message, repeated, tag = "1")]
    pub pools: ::prost::alloc::vec::Vec<::prost_types::Any>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryPoolsWithFilterResponse {
    const NAME: &'static str = "QueryPoolsWithFilterResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryPoolsWithFilterResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryPoolsWithFilterResponse".into()
    }
}
/// QuerySpotPriceResponse defines the gRPC response structure for a SpotPrice
/// query.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySpotPriceResponse {
    /// String of the Dec. Ex) 10.203uatom
    #[prost(string, tag = "1")]
    pub spot_price: ::prost::alloc::string::String,
}
impl ::prost::Name for QuerySpotPriceResponse {
    const NAME: &'static str = "QuerySpotPriceResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QuerySpotPriceResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QuerySpotPriceResponse".into()
    }
}
/// =============================== EstimateSwapExactAmountIn
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySwapExactAmountInRequest {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(string, tag = "3")]
    pub token_in: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub routes: ::prost::alloc::vec::Vec<
        super::super::poolmanager::v1beta1::SwapAmountInRoute,
    >,
}
impl ::prost::Name for QuerySwapExactAmountInRequest {
    const NAME: &'static str = "QuerySwapExactAmountInRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QuerySwapExactAmountInRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QuerySwapExactAmountInRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySwapExactAmountInResponse {
    #[prost(string, tag = "1")]
    pub token_out_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for QuerySwapExactAmountInResponse {
    const NAME: &'static str = "QuerySwapExactAmountInResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QuerySwapExactAmountInResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QuerySwapExactAmountInResponse".into()
    }
}
/// =============================== EstimateSwapExactAmountOut
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySwapExactAmountOutRequest {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(message, repeated, tag = "3")]
    pub routes: ::prost::alloc::vec::Vec<
        super::super::poolmanager::v1beta1::SwapAmountOutRoute,
    >,
    #[prost(string, tag = "4")]
    pub token_out: ::prost::alloc::string::String,
}
impl ::prost::Name for QuerySwapExactAmountOutRequest {
    const NAME: &'static str = "QuerySwapExactAmountOutRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QuerySwapExactAmountOutRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QuerySwapExactAmountOutRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuerySwapExactAmountOutResponse {
    #[prost(string, tag = "1")]
    pub token_in_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for QuerySwapExactAmountOutResponse {
    const NAME: &'static str = "QuerySwapExactAmountOutResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QuerySwapExactAmountOutResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QuerySwapExactAmountOutResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalLiquidityRequest {}
impl ::prost::Name for QueryTotalLiquidityRequest {
    const NAME: &'static str = "QueryTotalLiquidityRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryTotalLiquidityRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryTotalLiquidityRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalLiquidityResponse {
    #[prost(message, repeated, tag = "1")]
    pub liquidity: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for QueryTotalLiquidityResponse {
    const NAME: &'static str = "QueryTotalLiquidityResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryTotalLiquidityResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryTotalLiquidityResponse".into()
    }
}
/// =============================== QueryConcentratedPoolIdLinkFromCFMM
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryConcentratedPoolIdLinkFromCfmmRequest {
    #[prost(uint64, tag = "1")]
    pub cfmm_pool_id: u64,
}
impl ::prost::Name for QueryConcentratedPoolIdLinkFromCfmmRequest {
    const NAME: &'static str = "QueryConcentratedPoolIdLinkFromCFMMRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryConcentratedPoolIdLinkFromCFMMRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryConcentratedPoolIdLinkFromCFMMRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryConcentratedPoolIdLinkFromCfmmResponse {
    #[prost(uint64, tag = "1")]
    pub concentrated_pool_id: u64,
}
impl ::prost::Name for QueryConcentratedPoolIdLinkFromCfmmResponse {
    const NAME: &'static str = "QueryConcentratedPoolIdLinkFromCFMMResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryConcentratedPoolIdLinkFromCFMMResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryConcentratedPoolIdLinkFromCFMMResponse".into()
    }
}
/// =============================== QueryCFMMConcentratedPoolLinks
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCfmmConcentratedPoolLinksRequest {}
impl ::prost::Name for QueryCfmmConcentratedPoolLinksRequest {
    const NAME: &'static str = "QueryCFMMConcentratedPoolLinksRequest";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryCFMMConcentratedPoolLinksRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryCFMMConcentratedPoolLinksRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCfmmConcentratedPoolLinksResponse {
    #[prost(message, optional, tag = "1")]
    pub migration_records: ::core::option::Option<MigrationRecords>,
}
impl ::prost::Name for QueryCfmmConcentratedPoolLinksResponse {
    const NAME: &'static str = "QueryCFMMConcentratedPoolLinksResponse";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.QueryCFMMConcentratedPoolLinksResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.QueryCFMMConcentratedPoolLinksResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "osmosis")]
pub mod query_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn pools(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryPoolsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPoolsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/Pools",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("osmosis.gamm.v1beta1.Query", "Pools"));
            self.inner.unary(req, path, codec).await
        }
        /// Deprecated: please use the alternative in x/poolmanager
        pub async fn num_pools(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryNumPoolsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryNumPoolsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/NumPools",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("osmosis.gamm.v1beta1.Query", "NumPools"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn total_liquidity(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryTotalLiquidityRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTotalLiquidityResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/TotalLiquidity",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("osmosis.gamm.v1beta1.Query", "TotalLiquidity"));
            self.inner.unary(req, path, codec).await
        }
        /// PoolsWithFilter allows you to query specific pools with requested
        /// parameters
        pub async fn pools_with_filter(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryPoolsWithFilterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPoolsWithFilterResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/PoolsWithFilter",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("osmosis.gamm.v1beta1.Query", "PoolsWithFilter"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deprecated: please use the alternative in x/poolmanager
        pub async fn pool(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPoolResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/Pool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("osmosis.gamm.v1beta1.Query", "Pool"));
            self.inner.unary(req, path, codec).await
        }
        /// PoolType returns the type of the pool.
        /// Returns "Balancer" as a string literal when the pool is a balancer pool.
        /// Errors if the pool is failed to be type caseted.
        pub async fn pool_type(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryPoolTypeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPoolTypeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/PoolType",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("osmosis.gamm.v1beta1.Query", "PoolType"));
            self.inner.unary(req, path, codec).await
        }
        /// Simulates joining pool without a swap. Returns the amount of shares you'd
        /// get and tokens needed to provide
        pub async fn calc_join_pool_no_swap_shares(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryCalcJoinPoolNoSwapSharesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryCalcJoinPoolNoSwapSharesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/CalcJoinPoolNoSwapShares",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.gamm.v1beta1.Query",
                        "CalcJoinPoolNoSwapShares",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn calc_join_pool_shares(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryCalcJoinPoolSharesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryCalcJoinPoolSharesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/CalcJoinPoolShares",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("osmosis.gamm.v1beta1.Query", "CalcJoinPoolShares"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn calc_exit_pool_coins_from_shares(
            &mut self,
            request: impl tonic::IntoRequest<
                super::QueryCalcExitPoolCoinsFromSharesRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::QueryCalcExitPoolCoinsFromSharesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/CalcExitPoolCoinsFromShares",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.gamm.v1beta1.Query",
                        "CalcExitPoolCoinsFromShares",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn pool_params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryPoolParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPoolParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/PoolParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("osmosis.gamm.v1beta1.Query", "PoolParams"));
            self.inner.unary(req, path, codec).await
        }
        /// Deprecated: please use the alternative in x/poolmanager
        pub async fn total_pool_liquidity(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryTotalPoolLiquidityRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTotalPoolLiquidityResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/TotalPoolLiquidity",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("osmosis.gamm.v1beta1.Query", "TotalPoolLiquidity"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn total_shares(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryTotalSharesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTotalSharesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/TotalShares",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("osmosis.gamm.v1beta1.Query", "TotalShares"));
            self.inner.unary(req, path, codec).await
        }
        /// SpotPrice defines a gRPC query handler that returns the spot price given
        /// a base denomination and a quote denomination.
        pub async fn spot_price(
            &mut self,
            request: impl tonic::IntoRequest<super::QuerySpotPriceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySpotPriceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/SpotPrice",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("osmosis.gamm.v1beta1.Query", "SpotPrice"));
            self.inner.unary(req, path, codec).await
        }
        /// Deprecated: please use the alternative in x/poolmanager
        pub async fn estimate_swap_exact_amount_in(
            &mut self,
            request: impl tonic::IntoRequest<super::QuerySwapExactAmountInRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySwapExactAmountInResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/EstimateSwapExactAmountIn",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.gamm.v1beta1.Query",
                        "EstimateSwapExactAmountIn",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deprecated: please use the alternative in x/poolmanager
        pub async fn estimate_swap_exact_amount_out(
            &mut self,
            request: impl tonic::IntoRequest<super::QuerySwapExactAmountOutRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySwapExactAmountOutResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/EstimateSwapExactAmountOut",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.gamm.v1beta1.Query",
                        "EstimateSwapExactAmountOut",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ConcentratedPoolIdLinkFromBalancer returns the pool id of the concentrated
        /// pool that is linked with the given CFMM pool.
        pub async fn concentrated_pool_id_link_from_cfmm(
            &mut self,
            request: impl tonic::IntoRequest<
                super::QueryConcentratedPoolIdLinkFromCfmmRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::QueryConcentratedPoolIdLinkFromCfmmResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/ConcentratedPoolIdLinkFromCFMM",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.gamm.v1beta1.Query",
                        "ConcentratedPoolIdLinkFromCFMM",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CFMMConcentratedPoolLinks returns migration links between CFMM and
        /// Concentrated pools.
        pub async fn cfmm_concentrated_pool_links(
            &mut self,
            request: impl tonic::IntoRequest<
                super::QueryCfmmConcentratedPoolLinksRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::QueryCfmmConcentratedPoolLinksResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.gamm.v1beta1.Query/CFMMConcentratedPoolLinks",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.gamm.v1beta1.Query",
                        "CFMMConcentratedPoolLinks",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "osmosis")]
pub mod query_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryServer.
    #[async_trait]
    pub trait Query: Send + Sync + 'static {
        async fn pools(
            &self,
            request: tonic::Request<super::QueryPoolsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPoolsResponse>,
            tonic::Status,
        >;
        /// Deprecated: please use the alternative in x/poolmanager
        async fn num_pools(
            &self,
            request: tonic::Request<super::QueryNumPoolsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryNumPoolsResponse>,
            tonic::Status,
        >;
        async fn total_liquidity(
            &self,
            request: tonic::Request<super::QueryTotalLiquidityRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTotalLiquidityResponse>,
            tonic::Status,
        >;
        /// PoolsWithFilter allows you to query specific pools with requested
        /// parameters
        async fn pools_with_filter(
            &self,
            request: tonic::Request<super::QueryPoolsWithFilterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPoolsWithFilterResponse>,
            tonic::Status,
        >;
        /// Deprecated: please use the alternative in x/poolmanager
        async fn pool(
            &self,
            request: tonic::Request<super::QueryPoolRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPoolResponse>,
            tonic::Status,
        >;
        /// PoolType returns the type of the pool.
        /// Returns "Balancer" as a string literal when the pool is a balancer pool.
        /// Errors if the pool is failed to be type caseted.
        async fn pool_type(
            &self,
            request: tonic::Request<super::QueryPoolTypeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPoolTypeResponse>,
            tonic::Status,
        >;
        /// Simulates joining pool without a swap. Returns the amount of shares you'd
        /// get and tokens needed to provide
        async fn calc_join_pool_no_swap_shares(
            &self,
            request: tonic::Request<super::QueryCalcJoinPoolNoSwapSharesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryCalcJoinPoolNoSwapSharesResponse>,
            tonic::Status,
        >;
        async fn calc_join_pool_shares(
            &self,
            request: tonic::Request<super::QueryCalcJoinPoolSharesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryCalcJoinPoolSharesResponse>,
            tonic::Status,
        >;
        async fn calc_exit_pool_coins_from_shares(
            &self,
            request: tonic::Request<super::QueryCalcExitPoolCoinsFromSharesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryCalcExitPoolCoinsFromSharesResponse>,
            tonic::Status,
        >;
        async fn pool_params(
            &self,
            request: tonic::Request<super::QueryPoolParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPoolParamsResponse>,
            tonic::Status,
        >;
        /// Deprecated: please use the alternative in x/poolmanager
        async fn total_pool_liquidity(
            &self,
            request: tonic::Request<super::QueryTotalPoolLiquidityRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTotalPoolLiquidityResponse>,
            tonic::Status,
        >;
        async fn total_shares(
            &self,
            request: tonic::Request<super::QueryTotalSharesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryTotalSharesResponse>,
            tonic::Status,
        >;
        /// SpotPrice defines a gRPC query handler that returns the spot price given
        /// a base denomination and a quote denomination.
        async fn spot_price(
            &self,
            request: tonic::Request<super::QuerySpotPriceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySpotPriceResponse>,
            tonic::Status,
        >;
        /// Deprecated: please use the alternative in x/poolmanager
        async fn estimate_swap_exact_amount_in(
            &self,
            request: tonic::Request<super::QuerySwapExactAmountInRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySwapExactAmountInResponse>,
            tonic::Status,
        >;
        /// Deprecated: please use the alternative in x/poolmanager
        async fn estimate_swap_exact_amount_out(
            &self,
            request: tonic::Request<super::QuerySwapExactAmountOutRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySwapExactAmountOutResponse>,
            tonic::Status,
        >;
        /// ConcentratedPoolIdLinkFromBalancer returns the pool id of the concentrated
        /// pool that is linked with the given CFMM pool.
        async fn concentrated_pool_id_link_from_cfmm(
            &self,
            request: tonic::Request<super::QueryConcentratedPoolIdLinkFromCfmmRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryConcentratedPoolIdLinkFromCfmmResponse>,
            tonic::Status,
        >;
        /// CFMMConcentratedPoolLinks returns migration links between CFMM and
        /// Concentrated pools.
        async fn cfmm_concentrated_pool_links(
            &self,
            request: tonic::Request<super::QueryCfmmConcentratedPoolLinksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryCfmmConcentratedPoolLinksResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct QueryServer<T: Query> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Query> QueryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryServer<T>
    where
        T: Query,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/osmosis.gamm.v1beta1.Query/Pools" => {
                    #[allow(non_camel_case_types)]
                    struct PoolsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryPoolsRequest>
                    for PoolsSvc<T> {
                        type Response = super::QueryPoolsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryPoolsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::pools(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PoolsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/NumPools" => {
                    #[allow(non_camel_case_types)]
                    struct NumPoolsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryNumPoolsRequest>
                    for NumPoolsSvc<T> {
                        type Response = super::QueryNumPoolsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryNumPoolsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::num_pools(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = NumPoolsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/TotalLiquidity" => {
                    #[allow(non_camel_case_types)]
                    struct TotalLiquiditySvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryTotalLiquidityRequest>
                    for TotalLiquiditySvc<T> {
                        type Response = super::QueryTotalLiquidityResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryTotalLiquidityRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::total_liquidity(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = TotalLiquiditySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/PoolsWithFilter" => {
                    #[allow(non_camel_case_types)]
                    struct PoolsWithFilterSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryPoolsWithFilterRequest>
                    for PoolsWithFilterSvc<T> {
                        type Response = super::QueryPoolsWithFilterResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryPoolsWithFilterRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::pools_with_filter(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PoolsWithFilterSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/Pool" => {
                    #[allow(non_camel_case_types)]
                    struct PoolSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryPoolRequest>
                    for PoolSvc<T> {
                        type Response = super::QueryPoolResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryPoolRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::pool(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/PoolType" => {
                    #[allow(non_camel_case_types)]
                    struct PoolTypeSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryPoolTypeRequest>
                    for PoolTypeSvc<T> {
                        type Response = super::QueryPoolTypeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryPoolTypeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::pool_type(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PoolTypeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/CalcJoinPoolNoSwapShares" => {
                    #[allow(non_camel_case_types)]
                    struct CalcJoinPoolNoSwapSharesSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        super::QueryCalcJoinPoolNoSwapSharesRequest,
                    > for CalcJoinPoolNoSwapSharesSvc<T> {
                        type Response = super::QueryCalcJoinPoolNoSwapSharesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryCalcJoinPoolNoSwapSharesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::calc_join_pool_no_swap_shares(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CalcJoinPoolNoSwapSharesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/CalcJoinPoolShares" => {
                    #[allow(non_camel_case_types)]
                    struct CalcJoinPoolSharesSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryCalcJoinPoolSharesRequest>
                    for CalcJoinPoolSharesSvc<T> {
                        type Response = super::QueryCalcJoinPoolSharesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryCalcJoinPoolSharesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::calc_join_pool_shares(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CalcJoinPoolSharesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/CalcExitPoolCoinsFromShares" => {
                    #[allow(non_camel_case_types)]
                    struct CalcExitPoolCoinsFromSharesSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        super::QueryCalcExitPoolCoinsFromSharesRequest,
                    > for CalcExitPoolCoinsFromSharesSvc<T> {
                        type Response = super::QueryCalcExitPoolCoinsFromSharesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryCalcExitPoolCoinsFromSharesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::calc_exit_pool_coins_from_shares(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CalcExitPoolCoinsFromSharesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/PoolParams" => {
                    #[allow(non_camel_case_types)]
                    struct PoolParamsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryPoolParamsRequest>
                    for PoolParamsSvc<T> {
                        type Response = super::QueryPoolParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryPoolParamsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::pool_params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PoolParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/TotalPoolLiquidity" => {
                    #[allow(non_camel_case_types)]
                    struct TotalPoolLiquiditySvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryTotalPoolLiquidityRequest>
                    for TotalPoolLiquiditySvc<T> {
                        type Response = super::QueryTotalPoolLiquidityResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryTotalPoolLiquidityRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::total_pool_liquidity(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = TotalPoolLiquiditySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/TotalShares" => {
                    #[allow(non_camel_case_types)]
                    struct TotalSharesSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryTotalSharesRequest>
                    for TotalSharesSvc<T> {
                        type Response = super::QueryTotalSharesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryTotalSharesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::total_shares(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = TotalSharesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/SpotPrice" => {
                    #[allow(non_camel_case_types)]
                    struct SpotPriceSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QuerySpotPriceRequest>
                    for SpotPriceSvc<T> {
                        type Response = super::QuerySpotPriceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QuerySpotPriceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::spot_price(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SpotPriceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/EstimateSwapExactAmountIn" => {
                    #[allow(non_camel_case_types)]
                    struct EstimateSwapExactAmountInSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QuerySwapExactAmountInRequest>
                    for EstimateSwapExactAmountInSvc<T> {
                        type Response = super::QuerySwapExactAmountInResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QuerySwapExactAmountInRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::estimate_swap_exact_amount_in(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = EstimateSwapExactAmountInSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/EstimateSwapExactAmountOut" => {
                    #[allow(non_camel_case_types)]
                    struct EstimateSwapExactAmountOutSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QuerySwapExactAmountOutRequest>
                    for EstimateSwapExactAmountOutSvc<T> {
                        type Response = super::QuerySwapExactAmountOutResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QuerySwapExactAmountOutRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::estimate_swap_exact_amount_out(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = EstimateSwapExactAmountOutSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/ConcentratedPoolIdLinkFromCFMM" => {
                    #[allow(non_camel_case_types)]
                    struct ConcentratedPoolIdLinkFromCFMMSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        super::QueryConcentratedPoolIdLinkFromCfmmRequest,
                    > for ConcentratedPoolIdLinkFromCFMMSvc<T> {
                        type Response = super::QueryConcentratedPoolIdLinkFromCfmmResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryConcentratedPoolIdLinkFromCfmmRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::concentrated_pool_id_link_from_cfmm(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ConcentratedPoolIdLinkFromCFMMSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.gamm.v1beta1.Query/CFMMConcentratedPoolLinks" => {
                    #[allow(non_camel_case_types)]
                    struct CFMMConcentratedPoolLinksSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        super::QueryCfmmConcentratedPoolLinksRequest,
                    > for CFMMConcentratedPoolLinksSvc<T> {
                        type Response = super::QueryCfmmConcentratedPoolLinksResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryCfmmConcentratedPoolLinksRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::cfmm_concentrated_pool_links(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CFMMConcentratedPoolLinksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Query> Clone for QueryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Query> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Query> tonic::server::NamedService for QueryServer<T> {
        const NAME: &'static str = "osmosis.gamm.v1beta1.Query";
    }
}
/// Parameters for changing the weights in a balancer pool smoothly from
/// a start weight and end weight over a period of time.
/// Currently, the only smooth change supported is linear changing between
/// the two weights, but more types may be added in the future.
/// When these parameters are set, the weight w(t) for pool time `t` is the
/// following:
///    t <= start_time: w(t) = initial_pool_weights
///    start_time < t <= start_time + duration:
///      w(t) = initial_pool_weights + (t - start_time) *
///        (target_pool_weights - initial_pool_weights) / (duration)
///    t > start_time + duration: w(t) = target_pool_weights
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SmoothWeightChangeParams {
    /// The start time for beginning the weight change.
    /// If a parameter change / pool instantiation leaves this blank,
    /// it should be generated by the state_machine as the current time.
    #[prost(message, optional, tag = "1")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Duration for the weights to change over
    #[prost(message, optional, tag = "2")]
    pub duration: ::core::option::Option<::prost_types::Duration>,
    /// The initial pool weights. These are copied from the pool's settings
    /// at the time of weight change instantiation.
    /// The amount PoolAsset.token.amount field is ignored if present,
    /// future type refactorings should just have a type with the denom & weight
    /// here.
    #[prost(message, repeated, tag = "3")]
    pub initial_pool_weights: ::prost::alloc::vec::Vec<PoolAsset>,
    /// The target pool weights. The pool weights will change linearly with respect
    /// to time between start_time, and start_time + duration. The amount
    /// PoolAsset.token.amount field is ignored if present, future type
    /// refactorings should just have a type with the denom & weight here.
    ///
    /// Intermediate variable for the 'slope' of pool weights. This is equal to
    /// (target_pool_weights - initial_pool_weights) / (duration)
    /// TODO: Work out precision, and decide if this is good to add
    /// repeated PoolAsset poolWeightSlope = 5 [
    ///   (gogoproto.moretags) = "yaml:\"pool_weight_slope\"",
    ///   (gogoproto.nullable) = false
    /// ];
    #[prost(message, repeated, tag = "4")]
    pub target_pool_weights: ::prost::alloc::vec::Vec<PoolAsset>,
}
impl ::prost::Name for SmoothWeightChangeParams {
    const NAME: &'static str = "SmoothWeightChangeParams";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.SmoothWeightChangeParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.SmoothWeightChangeParams".into()
    }
}
/// PoolParams defined the parameters that will be managed by the pool
/// governance in the future. This params are not managed by the chain
/// governance. Instead they will be managed by the token holders of the pool.
/// The pool's token holders are specified in future_pool_governor.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolParams {
    #[prost(string, tag = "1")]
    pub swap_fee: ::prost::alloc::string::String,
    /// N.B.: exit fee is disabled during pool creation in x/poolmanager. While old
    /// pools can maintain a non-zero fee. No new pool can be created with non-zero
    /// fee anymore
    #[prost(string, tag = "2")]
    pub exit_fee: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub smooth_weight_change_params: ::core::option::Option<SmoothWeightChangeParams>,
}
impl ::prost::Name for PoolParams {
    const NAME: &'static str = "PoolParams";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.PoolParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.PoolParams".into()
    }
}
/// Pool asset is an internal struct that combines the amount of the
/// token in the pool, and its balancer weight.
/// This is an awkward packaging of data,
/// and should be revisited in a future state migration.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolAsset {
    /// Coins we are talking about,
    /// the denomination must be unique amongst all PoolAssets for this pool.
    #[prost(message, optional, tag = "1")]
    pub token: ::core::option::Option<super::super::super::cosmos::base::v1beta1::Coin>,
    /// Weight that is not normalized. This weight must be less than 2^50
    #[prost(string, tag = "2")]
    pub weight: ::prost::alloc::string::String,
}
impl ::prost::Name for PoolAsset {
    const NAME: &'static str = "PoolAsset";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.PoolAsset".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.PoolAsset".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pool {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub id: u64,
    #[prost(message, optional, tag = "3")]
    pub pool_params: ::core::option::Option<PoolParams>,
    /// This string specifies who will govern the pool in the future.
    /// Valid forms of this are:
    /// {token name},{duration}
    /// {duration}
    /// where {token name} if specified is the token which determines the
    /// governor, and if not specified is the LP token for this pool.duration is
    /// a time specified as 0w,1w,2w, etc. which specifies how long the token
    /// would need to be locked up to count in governance. 0w means no lockup.
    /// TODO: Further improve these docs
    #[prost(string, tag = "4")]
    pub future_pool_governor: ::prost::alloc::string::String,
    /// sum of all LP tokens sent out
    #[prost(message, optional, tag = "5")]
    pub total_shares: ::core::option::Option<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    /// These are assumed to be sorted by denomiation.
    /// They contain the pool asset and the information about the weight
    #[prost(message, repeated, tag = "6")]
    pub pool_assets: ::prost::alloc::vec::Vec<PoolAsset>,
    /// sum of all non-normalized pool weights
    #[prost(string, tag = "7")]
    pub total_weight: ::prost::alloc::string::String,
}
impl ::prost::Name for Pool {
    const NAME: &'static str = "Pool";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.Pool".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.Pool".into()
    }
}
/// Params holds parameters for the incentives module
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    #[prost(message, repeated, tag = "1")]
    pub pool_creation_fee: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.Params".into()
    }
}
/// GenesisState defines the gamm module's genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(message, repeated, tag = "1")]
    pub pools: ::prost::alloc::vec::Vec<::prost_types::Any>,
    /// will be renamed to next_pool_id in an upcoming version
    #[prost(uint64, tag = "2")]
    pub next_pool_number: u64,
    #[prost(message, optional, tag = "3")]
    pub params: ::core::option::Option<Params>,
    #[prost(message, optional, tag = "4")]
    pub migration_records: ::core::option::Option<MigrationRecords>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.GenesisState".into()
    }
}
/// ReplaceMigrationRecordsProposal is a gov Content type for updating the
/// migration records. If a ReplaceMigrationRecordsProposal passes, the
/// proposal’s records override the existing MigrationRecords set in the module.
/// Each record specifies a single connection between a single balancer pool and
/// a single concentrated pool.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplaceMigrationRecordsProposal {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub records: ::prost::alloc::vec::Vec<BalancerToConcentratedPoolLink>,
}
impl ::prost::Name for ReplaceMigrationRecordsProposal {
    const NAME: &'static str = "ReplaceMigrationRecordsProposal";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.ReplaceMigrationRecordsProposal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.ReplaceMigrationRecordsProposal".into()
    }
}
/// For example: if the existing DistrRecords were:
/// \[(Balancer 1, CL 5), (Balancer 2, CL 6), (Balancer 3, CL 7)\]
/// And an UpdateMigrationRecordsProposal includes
/// \[(Balancer 2, CL 0), (Balancer 3, CL 4), (Balancer 4, CL 10)\]
/// This would leave Balancer 1 record, delete Balancer 2 record,
/// Edit Balancer 3 record, and Add Balancer 4 record
/// The result MigrationRecords in state would be:
/// \[(Balancer 1, CL 5), (Balancer 3, CL 4), (Balancer 4, CL 10)\]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateMigrationRecordsProposal {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub records: ::prost::alloc::vec::Vec<BalancerToConcentratedPoolLink>,
}
impl ::prost::Name for UpdateMigrationRecordsProposal {
    const NAME: &'static str = "UpdateMigrationRecordsProposal";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.UpdateMigrationRecordsProposal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.UpdateMigrationRecordsProposal".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolRecordWithCfmmLink {
    #[prost(string, tag = "1")]
    pub denom0: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub denom1: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub tick_spacing: u64,
    #[prost(string, tag = "4")]
    pub exponent_at_price_one: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub spread_factor: ::prost::alloc::string::String,
    #[prost(uint64, tag = "6")]
    pub balancer_pool_id: u64,
}
impl ::prost::Name for PoolRecordWithCfmmLink {
    const NAME: &'static str = "PoolRecordWithCFMMLink";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.PoolRecordWithCFMMLink".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.PoolRecordWithCFMMLink".into()
    }
}
/// CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal is a gov Content type
/// for creating concentrated liquidity pools and linking it to a CFMM pool.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateConcentratedLiquidityPoolsAndLinktoCfmmProposal {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub pool_records_with_cfmm_link: ::prost::alloc::vec::Vec<PoolRecordWithCfmmLink>,
}
impl ::prost::Name for CreateConcentratedLiquidityPoolsAndLinktoCfmmProposal {
    const NAME: &'static str = "CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal"
            .into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.CreateConcentratedLiquidityPoolsAndLinktoCFMMProposal"
            .into()
    }
}
/// SetScalingFactorControllerProposal is a gov Content type for updating the
/// scaling factor controller address of a stableswap pool
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetScalingFactorControllerProposal {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub pool_id: u64,
    #[prost(string, tag = "4")]
    pub controller_address: ::prost::alloc::string::String,
}
impl ::prost::Name for SetScalingFactorControllerProposal {
    const NAME: &'static str = "SetScalingFactorControllerProposal";
    const PACKAGE: &'static str = "osmosis.gamm.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.gamm.v1beta1.SetScalingFactorControllerProposal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.gamm.v1beta1.SetScalingFactorControllerProposal".into()
    }
}
