// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// code_ide_whitelist contains the list of code ids that are allowed to be
    /// instantiated.
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub code_id_whitelist: ::prost::alloc::vec::Vec<u64>,
    /// pool_migration_limit is the maximum number of pools that can be migrated
    /// at once via governance proposal. This is to have a constant bound on the
    /// number of pools that can be migrated at once and remove the possibility
    /// of an unlikely scenario of causing a chain halt due to a large migration.
    #[prost(uint64, tag = "2")]
    pub pool_migration_limit: u64,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.Params".into()
    }
}
/// =============================== ContractInfoByPoolId
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParamsRequest {}
impl ::prost::Name for ParamsRequest {
    const NAME: &'static str = "ParamsRequest";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.ParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.ParamsRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for ParamsResponse {
    const NAME: &'static str = "ParamsResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.ParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.ParamsResponse".into()
    }
}
/// =============================== Pools
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolsRequest {
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for PoolsRequest {
    const NAME: &'static str = "PoolsRequest";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.PoolsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.PoolsRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolsResponse {
    #[prost(message, repeated, tag = "1")]
    pub pools: ::prost::alloc::vec::Vec<::prost_types::Any>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for PoolsResponse {
    const NAME: &'static str = "PoolsResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.PoolsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.PoolsResponse".into()
    }
}
/// =============================== ContractInfoByPoolId
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContractInfoByPoolIdRequest {
    /// pool_id is the pool id of the requested pool.
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl ::prost::Name for ContractInfoByPoolIdRequest {
    const NAME: &'static str = "ContractInfoByPoolIdRequest";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.ContractInfoByPoolIdRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.ContractInfoByPoolIdRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContractInfoByPoolIdResponse {
    /// contract_address is the pool address and contract address
    /// of the requested pool id.
    #[prost(string, tag = "1")]
    pub contract_address: ::prost::alloc::string::String,
    /// code_id is the code id of the requested pool id.
    #[prost(uint64, tag = "2")]
    pub code_id: u64,
}
impl ::prost::Name for ContractInfoByPoolIdResponse {
    const NAME: &'static str = "ContractInfoByPoolIdResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.ContractInfoByPoolIdResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.ContractInfoByPoolIdResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "osmosis")]
pub mod query_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Pools returns all cosmwasm pools
        pub async fn pools(
            &mut self,
            request: impl tonic::IntoRequest<super::PoolsRequest>,
        ) -> std::result::Result<tonic::Response<super::PoolsResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.cosmwasmpool.v1beta1.Query/Pools",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("osmosis.cosmwasmpool.v1beta1.Query", "Pools"));
            self.inner.unary(req, path, codec).await
        }
        /// Params returns the parameters of the x/cosmwasmpool module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::ParamsRequest>,
        ) -> std::result::Result<tonic::Response<super::ParamsResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.cosmwasmpool.v1beta1.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("osmosis.cosmwasmpool.v1beta1.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn contract_info_by_pool_id(
            &mut self,
            request: impl tonic::IntoRequest<super::ContractInfoByPoolIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ContractInfoByPoolIdResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.cosmwasmpool.v1beta1.Query/ContractInfoByPoolId",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.cosmwasmpool.v1beta1.Query",
                        "ContractInfoByPoolId",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "osmosis")]
pub mod query_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryServer.
    #[async_trait]
    pub trait Query: Send + Sync + 'static {
        /// Pools returns all cosmwasm pools
        async fn pools(
            &self,
            request: tonic::Request<super::PoolsRequest>,
        ) -> std::result::Result<tonic::Response<super::PoolsResponse>, tonic::Status>;
        /// Params returns the parameters of the x/cosmwasmpool module.
        async fn params(
            &self,
            request: tonic::Request<super::ParamsRequest>,
        ) -> std::result::Result<tonic::Response<super::ParamsResponse>, tonic::Status>;
        async fn contract_info_by_pool_id(
            &self,
            request: tonic::Request<super::ContractInfoByPoolIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ContractInfoByPoolIdResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct QueryServer<T: Query> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Query> QueryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryServer<T>
    where
        T: Query,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/osmosis.cosmwasmpool.v1beta1.Query/Pools" => {
                    #[allow(non_camel_case_types)]
                    struct PoolsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::PoolsRequest>
                    for PoolsSvc<T> {
                        type Response = super::PoolsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PoolsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::pools(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PoolsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.cosmwasmpool.v1beta1.Query/Params" => {
                    #[allow(non_camel_case_types)]
                    struct ParamsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::ParamsRequest>
                    for ParamsSvc<T> {
                        type Response = super::ParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ParamsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.cosmwasmpool.v1beta1.Query/ContractInfoByPoolId" => {
                    #[allow(non_camel_case_types)]
                    struct ContractInfoByPoolIdSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::ContractInfoByPoolIdRequest>
                    for ContractInfoByPoolIdSvc<T> {
                        type Response = super::ContractInfoByPoolIdResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ContractInfoByPoolIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::contract_info_by_pool_id(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ContractInfoByPoolIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Query> Clone for QueryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Query> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Query> tonic::server::NamedService for QueryServer<T> {
        const NAME: &'static str = "osmosis.cosmwasmpool.v1beta1.Query";
    }
}
/// UploadCosmWasmPoolCodeAndWhiteListProposal is a gov Content type for
/// uploading coswasm pool code and adding it to internal whitelist. Only the
/// code ids created by this message are eligible for being x/cosmwasmpool pools.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadCosmWasmPoolCodeAndWhiteListProposal {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// WASMByteCode can be raw or gzip compressed
    #[prost(bytes = "vec", tag = "3")]
    pub wasm_byte_code: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for UploadCosmWasmPoolCodeAndWhiteListProposal {
    const NAME: &'static str = "UploadCosmWasmPoolCodeAndWhiteListProposal";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.UploadCosmWasmPoolCodeAndWhiteListProposal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.UploadCosmWasmPoolCodeAndWhiteListProposal".into()
    }
}
/// MigratePoolContractsProposal is a gov Content type for
/// migrating  given pools to the new contract code and adding to internal
/// whitelist if needed. It has two options to perform the migration:
///
/// 1. If the codeID is non-zero, it will migrate the pool contracts to a given
/// codeID assuming that it has already been uploaded. uploadByteCode must be
/// empty in such a case. Fails if codeID does not exist. Fails if uploadByteCode
/// is not empty.
///
/// 2. If the codeID is zero, it will upload the given uploadByteCode and use the
/// new resulting code id to migrate the pool to. Errors if uploadByteCode is
/// empty or invalid.
///
/// In both cases, if one of the pools specified by the given poolID does not
/// exist, the proposal fails.
///
/// The reason for having poolIDs be a slice of ids is to account for the
/// potential need for emergency migration of all old code ids associated with
/// particular pools to new code ids, or simply having the flexibility of
/// migrating multiple older pool contracts to a new one at once when there is a
/// release.
///
/// poolD count to be submitted at once is gated by a governance paramets (20 at
/// launch). The proposal fails if more. Note that 20 was chosen arbitrarily to
/// have a constant bound on the number of pools migrated at once. This size will
/// be configured by a module parameter so it can be changed by a constant.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MigratePoolContractsProposal {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// pool_ids are the pool ids of the contracts to be migrated
    /// either to the new_code_id that is already uploaded to chain or to
    /// the given wasm_byte_code.
    #[prost(uint64, repeated, tag = "3")]
    pub pool_ids: ::prost::alloc::vec::Vec<u64>,
    /// new_code_id is the code id of the contract code to migrate to.
    /// Assumes that the code is already uploaded to chain. Only one of
    /// new_code_id and wasm_byte_code should be set.
    #[prost(uint64, tag = "4")]
    pub new_code_id: u64,
    /// WASMByteCode can be raw or gzip compressed. Assumes that the code id
    /// has not been uploaded yet so uploads the given code and migrates to it.
    /// Only one of new_code_id and wasm_byte_code should be set.
    #[prost(bytes = "vec", tag = "5")]
    pub wasm_byte_code: ::prost::alloc::vec::Vec<u8>,
    /// MigrateMsg migrate message to be used for migrating the pool contracts.
    #[prost(bytes = "vec", tag = "6")]
    pub migrate_msg: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for MigratePoolContractsProposal {
    const NAME: &'static str = "MigratePoolContractsProposal";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.MigratePoolContractsProposal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.MigratePoolContractsProposal".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "osmosis")]
pub mod msg_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "osmosis")]
pub mod msg_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MsgServer.
    #[async_trait]
    pub trait Msg: Send + Sync + 'static {}
    #[derive(Debug)]
    pub struct MsgServer<T: Msg> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Msg> MsgServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MsgServer<T>
    where
        T: Msg,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Msg> Clone for MsgServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Msg> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Msg> tonic::server::NamedService for MsgServer<T> {
        const NAME: &'static str = "osmosis.cosmwasmpool.v1beta1.Msg";
    }
}
/// ===================== CalcOutAmtGivenIn
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CalcOutAmtGivenIn {
    /// token_in is the token to be sent to the pool.
    #[prost(message, optional, tag = "1")]
    pub token_in: ::core::option::Option<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    /// token_out_denom is the token denom to be received from the pool.
    #[prost(string, tag = "2")]
    pub token_out_denom: ::prost::alloc::string::String,
    /// swap_fee is the swap fee for this swap estimate.
    #[prost(string, tag = "3")]
    pub swap_fee: ::prost::alloc::string::String,
}
impl ::prost::Name for CalcOutAmtGivenIn {
    const NAME: &'static str = "CalcOutAmtGivenIn";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.CalcOutAmtGivenIn".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.CalcOutAmtGivenIn".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CalcOutAmtGivenInRequest {
    /// calc_out_amt_given_in is the structure containing all the request
    /// information for this query.
    #[prost(message, optional, tag = "1")]
    pub calc_out_amt_given_in: ::core::option::Option<CalcOutAmtGivenIn>,
}
impl ::prost::Name for CalcOutAmtGivenInRequest {
    const NAME: &'static str = "CalcOutAmtGivenInRequest";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.CalcOutAmtGivenInRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.CalcOutAmtGivenInRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CalcOutAmtGivenInResponse {
    /// token_out is the token out computed from this swap estimate call.
    #[prost(message, optional, tag = "1")]
    pub token_out: ::core::option::Option<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for CalcOutAmtGivenInResponse {
    const NAME: &'static str = "CalcOutAmtGivenInResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.CalcOutAmtGivenInResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.CalcOutAmtGivenInResponse".into()
    }
}
/// ===================== CalcInAmtGivenOut
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CalcInAmtGivenOut {
    /// token_out is the token out to be receoved from the pool.
    #[prost(message, optional, tag = "1")]
    pub token_out: ::core::option::Option<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    /// token_in_denom is the token denom to be sentt to the pool.
    #[prost(string, tag = "2")]
    pub token_in_denom: ::prost::alloc::string::String,
    /// swap_fee is the swap fee for this swap estimate.
    #[prost(string, tag = "3")]
    pub swap_fee: ::prost::alloc::string::String,
}
impl ::prost::Name for CalcInAmtGivenOut {
    const NAME: &'static str = "CalcInAmtGivenOut";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.CalcInAmtGivenOut".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.CalcInAmtGivenOut".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CalcInAmtGivenOutRequest {
    /// calc_in_amt_given_out is the structure containing all the request
    /// information for this query.
    #[prost(message, optional, tag = "1")]
    pub calc_in_amt_given_out: ::core::option::Option<CalcInAmtGivenOut>,
}
impl ::prost::Name for CalcInAmtGivenOutRequest {
    const NAME: &'static str = "CalcInAmtGivenOutRequest";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.CalcInAmtGivenOutRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.CalcInAmtGivenOutRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CalcInAmtGivenOutResponse {
    /// token_in is the token in computed from this swap estimate call.
    #[prost(message, optional, tag = "1")]
    pub token_in: ::core::option::Option<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for CalcInAmtGivenOutResponse {
    const NAME: &'static str = "CalcInAmtGivenOutResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.CalcInAmtGivenOutResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.CalcInAmtGivenOutResponse".into()
    }
}
/// ===================== GetSwapFeeQueryMsg
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSwapFeeQueryMsg {
    /// get_swap_fee is the query structure to get swap fee.
    #[prost(message, optional, tag = "1")]
    pub get_swap_fee: ::core::option::Option<EmptyStruct>,
}
impl ::prost::Name for GetSwapFeeQueryMsg {
    const NAME: &'static str = "GetSwapFeeQueryMsg";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsg".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSwapFeeQueryMsgResponse {
    /// swap_fee is the swap fee for this swap estimate.
    #[prost(string, tag = "3")]
    pub swap_fee: ::prost::alloc::string::String,
}
impl ::prost::Name for GetSwapFeeQueryMsgResponse {
    const NAME: &'static str = "GetSwapFeeQueryMsgResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsgResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsgResponse".into()
    }
}
/// ===================== SpotPriceQueryMsg
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpotPrice {
    /// quote_asset_denom is the quote asset of the spot query.
    #[prost(string, tag = "1")]
    pub quote_asset_denom: ::prost::alloc::string::String,
    /// base_asset_denom is the base asset of the spot query.
    #[prost(string, tag = "2")]
    pub base_asset_denom: ::prost::alloc::string::String,
}
impl ::prost::Name for SpotPrice {
    const NAME: &'static str = "SpotPrice";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.SpotPrice".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.SpotPrice".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpotPriceQueryMsg {
    /// spot_price is the structure containing request field of the spot price
    /// query message.
    #[prost(message, optional, tag = "1")]
    pub spot_price: ::core::option::Option<SpotPrice>,
}
impl ::prost::Name for SpotPriceQueryMsg {
    const NAME: &'static str = "SpotPriceQueryMsg";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsg".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpotPriceQueryMsgResponse {
    /// spot_price is the spot price returned.
    #[prost(string, tag = "1")]
    pub spot_price: ::prost::alloc::string::String,
}
impl ::prost::Name for SpotPriceQueryMsgResponse {
    const NAME: &'static str = "SpotPriceQueryMsgResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsgResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsgResponse".into()
    }
}
/// ===================== GetTotalPoolLiquidityQueryMsg
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmptyStruct {}
impl ::prost::Name for EmptyStruct {
    const NAME: &'static str = "EmptyStruct";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.EmptyStruct".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.EmptyStruct".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTotalPoolLiquidityQueryMsg {
    /// get_total_pool_liquidity is the structure containing request field of the
    /// total pool liquidity query message.
    #[prost(message, optional, tag = "1")]
    pub get_total_pool_liquidity: ::core::option::Option<EmptyStruct>,
}
impl ::prost::Name for GetTotalPoolLiquidityQueryMsg {
    const NAME: &'static str = "GetTotalPoolLiquidityQueryMsg";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsg".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTotalPoolLiquidityQueryMsgResponse {
    ///   total_pool_liquidity is the total liquidity in the pool denominated in
    ///   coins.
    #[prost(message, repeated, tag = "1")]
    pub total_pool_liquidity: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for GetTotalPoolLiquidityQueryMsgResponse {
    const NAME: &'static str = "GetTotalPoolLiquidityQueryMsgResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsgResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsgResponse".into()
    }
}
/// ===================== GetTotalSharesQueryMsg
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTotalSharesQueryMsg {
    /// get_total_shares is the structure containing request field of the
    /// total shares query message.
    #[prost(message, optional, tag = "1")]
    pub get_total_shares: ::core::option::Option<EmptyStruct>,
}
impl ::prost::Name for GetTotalSharesQueryMsg {
    const NAME: &'static str = "GetTotalSharesQueryMsg";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsg".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTotalSharesQueryMsgResponse {
    /// total_shares is the amount of shares returned.
    #[prost(string, tag = "1")]
    pub total_shares: ::prost::alloc::string::String,
}
impl ::prost::Name for GetTotalSharesQueryMsgResponse {
    const NAME: &'static str = "GetTotalSharesQueryMsgResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsgResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsgResponse".into()
    }
}
/// CosmWasmPool represents the data serialized into state for each CW pool.
///
/// Note: CW Pool has 2 pool models:
/// - CosmWasmPool which is a proto-generated store model used for serialization
/// into state.
/// - Pool struct that encapsulates the CosmWasmPool and wasmKeeper for calling
/// the contract.
///
/// CosmWasmPool implements the poolmanager.PoolI interface but it panics on all
/// methods. The reason is that access to wasmKeeper is required to call the
/// contract.
///
/// Instead, all interactions and poolmanager.PoolI methods are to be performed
/// on the Pool struct. The reason why we cannot have a Pool struct only is
/// because it cannot be serialized into state due to having a non-serializable
/// wasmKeeper field.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CosmWasmPool {
    #[prost(string, tag = "1")]
    pub contract_address: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(uint64, tag = "3")]
    pub code_id: u64,
    #[prost(bytes = "vec", tag = "4")]
    pub instantiate_msg: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for CosmWasmPool {
    const NAME: &'static str = "CosmWasmPool";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.CosmWasmPool".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.CosmWasmPool".into()
    }
}
/// ===================== InstantiateMsg
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstantiateMsg {
    /// pool_asset_denoms is the list of asset denoms that are initialized
    /// at pool creation time.
    #[prost(string, repeated, tag = "1")]
    pub pool_asset_denoms: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for InstantiateMsg {
    const NAME: &'static str = "InstantiateMsg";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.InstantiateMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.InstantiateMsg".into()
    }
}
/// ===================== MsgCreateCosmwasmPool
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateCosmWasmPool {
    #[prost(uint64, tag = "1")]
    pub code_id: u64,
    #[prost(bytes = "vec", tag = "2")]
    pub instantiate_msg: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "3")]
    pub sender: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgCreateCosmWasmPool {
    const NAME: &'static str = "MsgCreateCosmWasmPool";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.MsgCreateCosmWasmPool".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.MsgCreateCosmWasmPool".into()
    }
}
/// Returns a unique poolID to identify the pool with.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateCosmWasmPoolResponse {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl ::prost::Name for MsgCreateCosmWasmPoolResponse {
    const NAME: &'static str = "MsgCreateCosmWasmPoolResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.MsgCreateCosmWasmPoolResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.MsgCreateCosmWasmPoolResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "osmosis")]
pub mod msg_creator_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MsgCreatorClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgCreatorClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgCreatorClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgCreatorClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MsgCreatorClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn create_cosm_wasm_pool(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCreateCosmWasmPool>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCreateCosmWasmPoolResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.cosmwasmpool.v1beta1.MsgCreator/CreateCosmWasmPool",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.cosmwasmpool.v1beta1.MsgCreator",
                        "CreateCosmWasmPool",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "osmosis")]
pub mod msg_creator_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MsgCreatorServer.
    #[async_trait]
    pub trait MsgCreator: Send + Sync + 'static {
        async fn create_cosm_wasm_pool(
            &self,
            request: tonic::Request<super::MsgCreateCosmWasmPool>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCreateCosmWasmPoolResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct MsgCreatorServer<T: MsgCreator> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: MsgCreator> MsgCreatorServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MsgCreatorServer<T>
    where
        T: MsgCreator,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/osmosis.cosmwasmpool.v1beta1.MsgCreator/CreateCosmWasmPool" => {
                    #[allow(non_camel_case_types)]
                    struct CreateCosmWasmPoolSvc<T: MsgCreator>(pub Arc<T>);
                    impl<
                        T: MsgCreator,
                    > tonic::server::UnaryService<super::MsgCreateCosmWasmPool>
                    for CreateCosmWasmPoolSvc<T> {
                        type Response = super::MsgCreateCosmWasmPoolResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgCreateCosmWasmPool>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MsgCreator>::create_cosm_wasm_pool(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreateCosmWasmPoolSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: MsgCreator> Clone for MsgCreatorServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: MsgCreator> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: MsgCreator> tonic::server::NamedService for MsgCreatorServer<T> {
        const NAME: &'static str = "osmosis.cosmwasmpool.v1beta1.MsgCreator";
    }
}
/// ===================== SwapExactAmountIn
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapExactAmountIn {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    /// token_in is the token to be sent to the pool.
    #[prost(message, optional, tag = "2")]
    pub token_in: ::core::option::Option<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    /// token_out_denom is the token denom to be received from the pool.
    #[prost(string, tag = "3")]
    pub token_out_denom: ::prost::alloc::string::String,
    /// token_out_min_amount is the minimum amount of token_out to be received from
    /// the pool.
    #[prost(string, tag = "4")]
    pub token_out_min_amount: ::prost::alloc::string::String,
    /// swap_fee is the swap fee for this swap estimate.
    #[prost(string, tag = "5")]
    pub swap_fee: ::prost::alloc::string::String,
}
impl ::prost::Name for SwapExactAmountIn {
    const NAME: &'static str = "SwapExactAmountIn";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.SwapExactAmountIn".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountIn".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapExactAmountInSudoMsg {
    /// swap_exact_amount_in is the structure containing all the request
    /// information for this message.
    #[prost(message, optional, tag = "1")]
    pub swap_exact_amount_in: ::core::option::Option<SwapExactAmountIn>,
}
impl ::prost::Name for SwapExactAmountInSudoMsg {
    const NAME: &'static str = "SwapExactAmountInSudoMsg";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.SwapExactAmountInSudoMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountInSudoMsg".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapExactAmountInSudoMsgResponse {
    /// token_out_amount is the token out computed from this swap estimate call.
    #[prost(string, tag = "1")]
    pub token_out_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for SwapExactAmountInSudoMsgResponse {
    const NAME: &'static str = "SwapExactAmountInSudoMsgResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.SwapExactAmountInSudoMsgResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountInSudoMsgResponse".into()
    }
}
/// ===================== SwapExactAmountOut
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapExactAmountOut {
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    /// token_out is the token to be sent out of the pool.
    #[prost(message, optional, tag = "2")]
    pub token_out: ::core::option::Option<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    /// token_in_denom is the token denom to be sent too the pool.
    #[prost(string, tag = "3")]
    pub token_in_denom: ::prost::alloc::string::String,
    /// token_in_max_amount is the maximum amount of token_in to be sent to the
    /// pool.
    #[prost(string, tag = "4")]
    pub token_in_max_amount: ::prost::alloc::string::String,
    /// swap_fee is the swap fee for this swap estimate.
    #[prost(string, tag = "5")]
    pub swap_fee: ::prost::alloc::string::String,
}
impl ::prost::Name for SwapExactAmountOut {
    const NAME: &'static str = "SwapExactAmountOut";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.SwapExactAmountOut".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountOut".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapExactAmountOutSudoMsg {
    /// swap_exact_amount_out is the structure containing all the request
    /// information for this message.
    #[prost(message, optional, tag = "1")]
    pub swap_exact_amount_out: ::core::option::Option<SwapExactAmountOut>,
}
impl ::prost::Name for SwapExactAmountOutSudoMsg {
    const NAME: &'static str = "SwapExactAmountOutSudoMsg";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.SwapExactAmountOutSudoMsg".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountOutSudoMsg".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SwapExactAmountOutSudoMsgResponse {
    /// token_in_amount is the token in computed from this swap estimate call.
    #[prost(string, tag = "1")]
    pub token_in_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for SwapExactAmountOutSudoMsgResponse {
    const NAME: &'static str = "SwapExactAmountOutSudoMsgResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.SwapExactAmountOutSudoMsgResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountOutSudoMsgResponse".into()
    }
}
/// ===================== JoinPoolExecuteMsg
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EmptyRequest {}
impl ::prost::Name for EmptyRequest {
    const NAME: &'static str = "EmptyRequest";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.EmptyRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.EmptyRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinPoolExecuteMsgRequest {
    /// join_pool is the structure containing all request fields of the join pool
    /// execute message.
    #[prost(message, optional, tag = "1")]
    pub join_pool: ::core::option::Option<EmptyRequest>,
}
impl ::prost::Name for JoinPoolExecuteMsgRequest {
    const NAME: &'static str = "JoinPoolExecuteMsgRequest";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.JoinPoolExecuteMsgRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.JoinPoolExecuteMsgRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinPoolExecuteMsgResponse {}
impl ::prost::Name for JoinPoolExecuteMsgResponse {
    const NAME: &'static str = "JoinPoolExecuteMsgResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.JoinPoolExecuteMsgResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.JoinPoolExecuteMsgResponse".into()
    }
}
/// ===================== ExitPoolExecuteMsg
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExitPoolExecuteMsgRequest {
    /// exit_pool is the structure containing all request fields of the exit pool
    /// execute message.
    #[prost(message, optional, tag = "1")]
    pub exit_pool: ::core::option::Option<EmptyRequest>,
}
impl ::prost::Name for ExitPoolExecuteMsgRequest {
    const NAME: &'static str = "ExitPoolExecuteMsgRequest";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.ExitPoolExecuteMsgRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.ExitPoolExecuteMsgRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExitPoolExecuteMsgResponse {}
impl ::prost::Name for ExitPoolExecuteMsgResponse {
    const NAME: &'static str = "ExitPoolExecuteMsgResponse";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.ExitPoolExecuteMsgResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.ExitPoolExecuteMsgResponse".into()
    }
}
/// GenesisState defines the cosmwasmpool module's genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// params is the container of cosmwasmpool parameters.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    #[prost(message, repeated, tag = "2")]
    pub pools: ::prost::alloc::vec::Vec<::prost_types::Any>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "osmosis.cosmwasmpool.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.cosmwasmpool.v1beta1.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.cosmwasmpool.v1beta1.GenesisState".into()
    }
}
