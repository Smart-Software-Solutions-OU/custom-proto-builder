// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TickInfo {
    #[prost(string, tag = "1")]
    pub liquidity_gross: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub liquidity_net: ::prost::alloc::string::String,
    /// Total spread rewards accumulated in the opposite direction that the tick
    /// was last crossed. i.e. if the current tick is to the right of this tick
    /// (meaning its currently a greater price), then this is the total spread
    /// rewards accumulated below the tick. If the current tick is to the left of
    /// this tick (meaning its currently at a lower price), then this is the total
    /// spread rewards accumulated above the tick.
    ///
    /// Note: the way this value is used depends on the direction of spread rewards
    /// we are calculating for. If we are calculating spread rewards below the
    /// lower tick and the lower tick is the active tick, then this is the
    /// spreadRewardGrowthGlobal - the lower tick's
    /// spreadRewardGrowthOppositeDirectionOfLastTraversal. If we are calculating
    /// spread rewards above the upper tick and the upper tick is the active tick,
    /// then this is just the tick's
    /// spreadRewardGrowthOppositeDirectionOfLastTraversal value.
    #[prost(message, repeated, tag = "3")]
    pub spread_reward_growth_opposite_direction_of_last_traversal: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::DecCoin,
    >,
    /// uptime_trackers is a container encapsulating the uptime trackers.
    /// We use a container instead of a "repeated UptimeTracker" directly
    /// because we need the ability to serialize and deserialize the
    /// container easily for events when crossing a tick.
    #[prost(message, optional, tag = "4")]
    pub uptime_trackers: ::core::option::Option<UptimeTrackers>,
}
impl ::prost::Name for TickInfo {
    const NAME: &'static str = "TickInfo";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.TickInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.TickInfo".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UptimeTrackers {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<UptimeTracker>,
}
impl ::prost::Name for UptimeTrackers {
    const NAME: &'static str = "UptimeTrackers";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.UptimeTrackers".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.UptimeTrackers".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UptimeTracker {
    #[prost(message, repeated, tag = "1")]
    pub uptime_growth_outside: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::DecCoin,
    >,
}
impl ::prost::Name for UptimeTracker {
    const NAME: &'static str = "UptimeTracker";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.UptimeTracker".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.UptimeTracker".into()
    }
}
/// Position contains position's id, address, pool id, lower tick, upper tick
/// join time, and liquidity.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Position {
    #[prost(uint64, tag = "1")]
    pub position_id: u64,
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub pool_id: u64,
    #[prost(int64, tag = "4")]
    pub lower_tick: i64,
    #[prost(int64, tag = "5")]
    pub upper_tick: i64,
    #[prost(message, optional, tag = "6")]
    pub join_time: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(string, tag = "7")]
    pub liquidity: ::prost::alloc::string::String,
}
impl ::prost::Name for Position {
    const NAME: &'static str = "Position";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.Position".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.Position".into()
    }
}
/// FullPositionBreakdown returns:
/// - the position itself
/// - the amount the position translates in terms of asset0 and asset1
/// - the amount of claimable fees
/// - the amount of claimable incentives
/// - the amount of incentives that would be forfeited if the position was closed
/// now
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FullPositionBreakdown {
    #[prost(message, optional, tag = "1")]
    pub position: ::core::option::Option<Position>,
    #[prost(message, optional, tag = "2")]
    pub asset0: ::core::option::Option<super::super::super::cosmos::base::v1beta1::Coin>,
    #[prost(message, optional, tag = "3")]
    pub asset1: ::core::option::Option<super::super::super::cosmos::base::v1beta1::Coin>,
    #[prost(message, repeated, tag = "4")]
    pub claimable_spread_rewards: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    #[prost(message, repeated, tag = "5")]
    pub claimable_incentives: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    #[prost(message, repeated, tag = "6")]
    pub forfeited_incentives: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for FullPositionBreakdown {
    const NAME: &'static str = "FullPositionBreakdown";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.FullPositionBreakdown".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.FullPositionBreakdown".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PositionWithPeriodLock {
    #[prost(message, optional, tag = "1")]
    pub position: ::core::option::Option<Position>,
    #[prost(message, optional, tag = "2")]
    pub locks: ::core::option::Option<super::super::lockup::PeriodLock>,
}
impl ::prost::Name for PositionWithPeriodLock {
    const NAME: &'static str = "PositionWithPeriodLock";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.PositionWithPeriodLock".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.PositionWithPeriodLock".into()
    }
}
/// IncentiveRecord is the high-level struct we use to deal with an independent
/// incentive being distributed on a pool. Note that PoolId, Denom, and MinUptime
/// are included in the key so we avoid storing them in state, hence the
/// distinction between IncentiveRecord and IncentiveRecordBody.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IncentiveRecord {
    /// incentive_id is the id uniquely identifying this incentive record.
    #[prost(uint64, tag = "1")]
    pub incentive_id: u64,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    /// incentive record body holds necessary
    #[prost(message, optional, tag = "4")]
    pub incentive_record_body: ::core::option::Option<IncentiveRecordBody>,
    /// min_uptime is the minimum uptime required for liquidity to qualify for this
    /// incentive. It should be always be one of the supported uptimes in
    /// types.SupportedUptimes
    #[prost(message, optional, tag = "5")]
    pub min_uptime: ::core::option::Option<::prost_types::Duration>,
}
impl ::prost::Name for IncentiveRecord {
    const NAME: &'static str = "IncentiveRecord";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.IncentiveRecord".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.IncentiveRecord".into()
    }
}
/// IncentiveRecordBody represents the body stored in state for each individual
/// record.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IncentiveRecordBody {
    /// remaining_coin is the total amount of incentives to be distributed
    #[prost(message, optional, tag = "1")]
    pub remaining_coin: ::core::option::Option<
        super::super::super::cosmos::base::v1beta1::DecCoin,
    >,
    /// emission_rate is the incentive emission rate per second
    #[prost(string, tag = "2")]
    pub emission_rate: ::prost::alloc::string::String,
    /// start_time is the time when the incentive starts distributing
    #[prost(message, optional, tag = "3")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for IncentiveRecordBody {
    const NAME: &'static str = "IncentiveRecordBody";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.IncentiveRecordBody".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.IncentiveRecordBody".into()
    }
}
/// =============================== UserPositions
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserPositionsRequest {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub pool_id: u64,
    #[prost(message, optional, tag = "3")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for UserPositionsRequest {
    const NAME: &'static str = "UserPositionsRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.UserPositionsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.UserPositionsRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserPositionsResponse {
    #[prost(message, repeated, tag = "1")]
    pub positions: ::prost::alloc::vec::Vec<FullPositionBreakdown>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for UserPositionsResponse {
    const NAME: &'static str = "UserPositionsResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.UserPositionsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.UserPositionsResponse".into()
    }
}
/// =============================== PositionById
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PositionByIdRequest {
    #[prost(uint64, tag = "1")]
    pub position_id: u64,
}
impl ::prost::Name for PositionByIdRequest {
    const NAME: &'static str = "PositionByIdRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.PositionByIdRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.PositionByIdRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PositionByIdResponse {
    #[prost(message, optional, tag = "1")]
    pub position: ::core::option::Option<FullPositionBreakdown>,
}
impl ::prost::Name for PositionByIdResponse {
    const NAME: &'static str = "PositionByIdResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.PositionByIdResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.PositionByIdResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NumPoolPositionsRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl ::prost::Name for NumPoolPositionsRequest {
    const NAME: &'static str = "NumPoolPositionsRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.NumPoolPositionsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.NumPoolPositionsRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NumPoolPositionsResponse {
    #[prost(uint64, tag = "1")]
    pub position_count: u64,
}
impl ::prost::Name for NumPoolPositionsResponse {
    const NAME: &'static str = "NumPoolPositionsResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.NumPoolPositionsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.NumPoolPositionsResponse".into()
    }
}
/// =============================== Pools
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolsRequest {
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for PoolsRequest {
    const NAME: &'static str = "PoolsRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.PoolsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.PoolsRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolsResponse {
    #[prost(message, repeated, tag = "1")]
    pub pools: ::prost::alloc::vec::Vec<::prost_types::Any>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for PoolsResponse {
    const NAME: &'static str = "PoolsResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.PoolsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.PoolsResponse".into()
    }
}
/// =============================== ModuleParams
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParamsRequest {}
impl ::prost::Name for ParamsRequest {
    const NAME: &'static str = "ParamsRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.ParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.ParamsRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<super::Params>,
}
impl ::prost::Name for ParamsResponse {
    const NAME: &'static str = "ParamsResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.ParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.ParamsResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TickLiquidityNet {
    #[prost(string, tag = "1")]
    pub liquidity_net: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub tick_index: i64,
}
impl ::prost::Name for TickLiquidityNet {
    const NAME: &'static str = "TickLiquidityNet";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.TickLiquidityNet".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.TickLiquidityNet".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiquidityDepthWithRange {
    #[prost(string, tag = "1")]
    pub liquidity_amount: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub lower_tick: i64,
    #[prost(int64, tag = "3")]
    pub upper_tick: i64,
}
impl ::prost::Name for LiquidityDepthWithRange {
    const NAME: &'static str = "LiquidityDepthWithRange";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.LiquidityDepthWithRange".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.LiquidityDepthWithRange".into()
    }
}
/// =============================== LiquidityNetInDirection
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiquidityNetInDirectionRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    #[prost(string, tag = "2")]
    pub token_in: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub start_tick: i64,
    #[prost(bool, tag = "4")]
    pub use_cur_tick: bool,
    #[prost(int64, tag = "5")]
    pub bound_tick: i64,
    #[prost(bool, tag = "6")]
    pub use_no_bound: bool,
}
impl ::prost::Name for LiquidityNetInDirectionRequest {
    const NAME: &'static str = "LiquidityNetInDirectionRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiquidityNetInDirectionResponse {
    #[prost(message, repeated, tag = "1")]
    pub liquidity_depths: ::prost::alloc::vec::Vec<TickLiquidityNet>,
    #[prost(int64, tag = "2")]
    pub current_tick: i64,
    #[prost(string, tag = "3")]
    pub current_liquidity: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub current_sqrt_price: ::prost::alloc::string::String,
}
impl ::prost::Name for LiquidityNetInDirectionResponse {
    const NAME: &'static str = "LiquidityNetInDirectionResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionResponse".into()
    }
}
/// =============================== LiquidityPerTickRange
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiquidityPerTickRangeRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl ::prost::Name for LiquidityPerTickRangeRequest {
    const NAME: &'static str = "LiquidityPerTickRangeRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LiquidityPerTickRangeResponse {
    #[prost(message, repeated, tag = "1")]
    pub liquidity: ::prost::alloc::vec::Vec<LiquidityDepthWithRange>,
    #[prost(int64, tag = "2")]
    pub bucket_index: i64,
}
impl ::prost::Name for LiquidityPerTickRangeResponse {
    const NAME: &'static str = "LiquidityPerTickRangeResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeResponse".into()
    }
}
/// ===================== QueryClaimableSpreadRewards
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClaimableSpreadRewardsRequest {
    #[prost(uint64, tag = "1")]
    pub position_id: u64,
}
impl ::prost::Name for ClaimableSpreadRewardsRequest {
    const NAME: &'static str = "ClaimableSpreadRewardsRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClaimableSpreadRewardsResponse {
    #[prost(message, repeated, tag = "1")]
    pub claimable_spread_rewards: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for ClaimableSpreadRewardsResponse {
    const NAME: &'static str = "ClaimableSpreadRewardsResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsResponse".into()
    }
}
/// ===================== QueryClaimableIncentives
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClaimableIncentivesRequest {
    #[prost(uint64, tag = "1")]
    pub position_id: u64,
}
impl ::prost::Name for ClaimableIncentivesRequest {
    const NAME: &'static str = "ClaimableIncentivesRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClaimableIncentivesResponse {
    #[prost(message, repeated, tag = "1")]
    pub claimable_incentives: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    #[prost(message, repeated, tag = "2")]
    pub forfeited_incentives: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for ClaimableIncentivesResponse {
    const NAME: &'static str = "ClaimableIncentivesResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesResponse".into()
    }
}
/// ===================== QueryPoolAccumulatorRewards
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolAccumulatorRewardsRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
}
impl ::prost::Name for PoolAccumulatorRewardsRequest {
    const NAME: &'static str = "PoolAccumulatorRewardsRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolAccumulatorRewardsResponse {
    #[prost(message, repeated, tag = "1")]
    pub spread_reward_growth_global: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::DecCoin,
    >,
    #[prost(message, repeated, tag = "2")]
    pub uptime_growth_global: ::prost::alloc::vec::Vec<UptimeTracker>,
}
impl ::prost::Name for PoolAccumulatorRewardsResponse {
    const NAME: &'static str = "PoolAccumulatorRewardsResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsResponse".into()
    }
}
/// ===================== QueryTickAccumulatorTrackers
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TickAccumulatorTrackersRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    #[prost(int64, tag = "2")]
    pub tick_index: i64,
}
impl ::prost::Name for TickAccumulatorTrackersRequest {
    const NAME: &'static str = "TickAccumulatorTrackersRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TickAccumulatorTrackersResponse {
    #[prost(message, repeated, tag = "1")]
    pub spread_reward_growth_opposite_direction_of_last_traversal: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::DecCoin,
    >,
    #[prost(message, repeated, tag = "2")]
    pub uptime_trackers: ::prost::alloc::vec::Vec<UptimeTracker>,
}
impl ::prost::Name for TickAccumulatorTrackersResponse {
    const NAME: &'static str = "TickAccumulatorTrackersResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersResponse".into()
    }
}
/// ===================== QueryIncentiveRecords
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IncentiveRecordsRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for IncentiveRecordsRequest {
    const NAME: &'static str = "IncentiveRecordsRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.IncentiveRecordsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.IncentiveRecordsRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IncentiveRecordsResponse {
    #[prost(message, repeated, tag = "1")]
    pub incentive_records: ::prost::alloc::vec::Vec<IncentiveRecord>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for IncentiveRecordsResponse {
    const NAME: &'static str = "IncentiveRecordsResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.IncentiveRecordsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.IncentiveRecordsResponse".into()
    }
}
/// =============================== CFMMPoolIdLinkFromConcentratedPoolId
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CfmmPoolIdLinkFromConcentratedPoolIdRequest {
    #[prost(uint64, tag = "1")]
    pub concentrated_pool_id: u64,
}
impl ::prost::Name for CfmmPoolIdLinkFromConcentratedPoolIdRequest {
    const NAME: &'static str = "CFMMPoolIdLinkFromConcentratedPoolIdRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.CFMMPoolIdLinkFromConcentratedPoolIdRequest"
            .into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.CFMMPoolIdLinkFromConcentratedPoolIdRequest"
            .into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CfmmPoolIdLinkFromConcentratedPoolIdResponse {
    #[prost(uint64, tag = "1")]
    pub cfmm_pool_id: u64,
}
impl ::prost::Name for CfmmPoolIdLinkFromConcentratedPoolIdResponse {
    const NAME: &'static str = "CFMMPoolIdLinkFromConcentratedPoolIdResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.CFMMPoolIdLinkFromConcentratedPoolIdResponse"
            .into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.CFMMPoolIdLinkFromConcentratedPoolIdResponse"
            .into()
    }
}
/// =============================== UserUnbondingPositions
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserUnbondingPositionsRequest {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for UserUnbondingPositionsRequest {
    const NAME: &'static str = "UserUnbondingPositionsRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.UserUnbondingPositionsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.UserUnbondingPositionsRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserUnbondingPositionsResponse {
    #[prost(message, repeated, tag = "1")]
    pub positions_with_period_lock: ::prost::alloc::vec::Vec<PositionWithPeriodLock>,
}
impl ::prost::Name for UserUnbondingPositionsResponse {
    const NAME: &'static str = "UserUnbondingPositionsResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.UserUnbondingPositionsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.UserUnbondingPositionsResponse".into()
    }
}
/// =============================== GetTotalLiquidity
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTotalLiquidityRequest {}
impl ::prost::Name for GetTotalLiquidityRequest {
    const NAME: &'static str = "GetTotalLiquidityRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.GetTotalLiquidityRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.GetTotalLiquidityRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTotalLiquidityResponse {
    #[prost(message, repeated, tag = "1")]
    pub total_liquidity: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for GetTotalLiquidityResponse {
    const NAME: &'static str = "GetTotalLiquidityResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.GetTotalLiquidityResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.GetTotalLiquidityResponse".into()
    }
}
/// =============================== NumNextInitializedTicks
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NumNextInitializedTicksRequest {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    #[prost(string, tag = "2")]
    pub token_in_denom: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub num_next_initialized_ticks: u64,
}
impl ::prost::Name for NumNextInitializedTicksRequest {
    const NAME: &'static str = "NumNextInitializedTicksRequest";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.NumNextInitializedTicksRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.NumNextInitializedTicksRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NumNextInitializedTicksResponse {
    #[prost(message, repeated, tag = "1")]
    pub liquidity_depths: ::prost::alloc::vec::Vec<TickLiquidityNet>,
    #[prost(int64, tag = "2")]
    pub current_tick: i64,
    #[prost(string, tag = "3")]
    pub current_liquidity: ::prost::alloc::string::String,
}
impl ::prost::Name for NumNextInitializedTicksResponse {
    const NAME: &'static str = "NumNextInitializedTicksResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.NumNextInitializedTicksResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.NumNextInitializedTicksResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "osmosis")]
pub mod query_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Pools returns all concentrated liquidity pools
        pub async fn pools(
            &mut self,
            request: impl tonic::IntoRequest<super::PoolsRequest>,
        ) -> std::result::Result<tonic::Response<super::PoolsResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/Pools",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "Pools",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Params returns concentrated liquidity module params.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::ParamsRequest>,
        ) -> std::result::Result<tonic::Response<super::ParamsResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "Params",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UserPositions returns all concentrated positions of some address.
        pub async fn user_positions(
            &mut self,
            request: impl tonic::IntoRequest<super::UserPositionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UserPositionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/UserPositions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "UserPositions",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// LiquidityPerTickRange returns the amount of liquidity per every tick range
        /// existing within the given pool
        pub async fn liquidity_per_tick_range(
            &mut self,
            request: impl tonic::IntoRequest<super::LiquidityPerTickRangeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LiquidityPerTickRangeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/LiquidityPerTickRange",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "LiquidityPerTickRange",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// LiquidityNetInDirection returns liquidity net in the direction given.
        /// Uses the bound if specified, if not uses either min tick / max tick
        /// depending on the direction.
        pub async fn liquidity_net_in_direction(
            &mut self,
            request: impl tonic::IntoRequest<super::LiquidityNetInDirectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LiquidityNetInDirectionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/LiquidityNetInDirection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "LiquidityNetInDirection",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ClaimableSpreadRewards returns the amount of spread rewards that can be
        /// claimed by a position with the given id.
        pub async fn claimable_spread_rewards(
            &mut self,
            request: impl tonic::IntoRequest<super::ClaimableSpreadRewardsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ClaimableSpreadRewardsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/ClaimableSpreadRewards",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "ClaimableSpreadRewards",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ClaimableIncentives returns the amount of incentives that can be claimed
        /// and how many would be forfeited by a position with the given id.
        pub async fn claimable_incentives(
            &mut self,
            request: impl tonic::IntoRequest<super::ClaimableIncentivesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ClaimableIncentivesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/ClaimableIncentives",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "ClaimableIncentives",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// PositionById returns a position with the given id.
        pub async fn position_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::PositionByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PositionByIdResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/PositionById",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "PositionById",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// PoolAccumulatorRewards returns the pool-global accumulator rewards.
        /// Contains spread factor rewards and uptime rewards.
        pub async fn pool_accumulator_rewards(
            &mut self,
            request: impl tonic::IntoRequest<super::PoolAccumulatorRewardsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PoolAccumulatorRewardsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/PoolAccumulatorRewards",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "PoolAccumulatorRewards",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// IncentiveRecords returns the incentive records for a given poolId
        pub async fn incentive_records(
            &mut self,
            request: impl tonic::IntoRequest<super::IncentiveRecordsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::IncentiveRecordsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/IncentiveRecords",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "IncentiveRecords",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// TickAccumulatorTrackers returns the tick accumulator trackers.
        /// Contains spread factor and uptime accumulator trackers.
        pub async fn tick_accumulator_trackers(
            &mut self,
            request: impl tonic::IntoRequest<super::TickAccumulatorTrackersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TickAccumulatorTrackersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/TickAccumulatorTrackers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "TickAccumulatorTrackers",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// CFMMPoolIdLinkFromConcentratedPoolId returns the pool id of the CFMM
        /// pool that is linked with the given concentrated pool.
        pub async fn cfmm_pool_id_link_from_concentrated_pool_id(
            &mut self,
            request: impl tonic::IntoRequest<
                super::CfmmPoolIdLinkFromConcentratedPoolIdRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::CfmmPoolIdLinkFromConcentratedPoolIdResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/CFMMPoolIdLinkFromConcentratedPoolId",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "CFMMPoolIdLinkFromConcentratedPoolId",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// UserUnbondingPositions returns the position and lock info of unbonding
        /// positions of the given address.
        pub async fn user_unbonding_positions(
            &mut self,
            request: impl tonic::IntoRequest<super::UserUnbondingPositionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UserUnbondingPositionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/UserUnbondingPositions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "UserUnbondingPositions",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// GetTotalLiquidity returns total liquidity across all cl pools.
        pub async fn get_total_liquidity(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTotalLiquidityRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTotalLiquidityResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/GetTotalLiquidity",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "GetTotalLiquidity",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// NumNextInitializedTicks returns the provided number of next initialized
        /// ticks in the direction of swapping the token in denom.
        pub async fn num_next_initialized_ticks(
            &mut self,
            request: impl tonic::IntoRequest<super::NumNextInitializedTicksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::NumNextInitializedTicksResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Query/NumNextInitializedTicks",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Query",
                        "NumNextInitializedTicks",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "osmosis")]
pub mod query_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryServer.
    #[async_trait]
    pub trait Query: Send + Sync + 'static {
        /// Pools returns all concentrated liquidity pools
        async fn pools(
            &self,
            request: tonic::Request<super::PoolsRequest>,
        ) -> std::result::Result<tonic::Response<super::PoolsResponse>, tonic::Status>;
        /// Params returns concentrated liquidity module params.
        async fn params(
            &self,
            request: tonic::Request<super::ParamsRequest>,
        ) -> std::result::Result<tonic::Response<super::ParamsResponse>, tonic::Status>;
        /// UserPositions returns all concentrated positions of some address.
        async fn user_positions(
            &self,
            request: tonic::Request<super::UserPositionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UserPositionsResponse>,
            tonic::Status,
        >;
        /// LiquidityPerTickRange returns the amount of liquidity per every tick range
        /// existing within the given pool
        async fn liquidity_per_tick_range(
            &self,
            request: tonic::Request<super::LiquidityPerTickRangeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LiquidityPerTickRangeResponse>,
            tonic::Status,
        >;
        /// LiquidityNetInDirection returns liquidity net in the direction given.
        /// Uses the bound if specified, if not uses either min tick / max tick
        /// depending on the direction.
        async fn liquidity_net_in_direction(
            &self,
            request: tonic::Request<super::LiquidityNetInDirectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LiquidityNetInDirectionResponse>,
            tonic::Status,
        >;
        /// ClaimableSpreadRewards returns the amount of spread rewards that can be
        /// claimed by a position with the given id.
        async fn claimable_spread_rewards(
            &self,
            request: tonic::Request<super::ClaimableSpreadRewardsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ClaimableSpreadRewardsResponse>,
            tonic::Status,
        >;
        /// ClaimableIncentives returns the amount of incentives that can be claimed
        /// and how many would be forfeited by a position with the given id.
        async fn claimable_incentives(
            &self,
            request: tonic::Request<super::ClaimableIncentivesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ClaimableIncentivesResponse>,
            tonic::Status,
        >;
        /// PositionById returns a position with the given id.
        async fn position_by_id(
            &self,
            request: tonic::Request<super::PositionByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PositionByIdResponse>,
            tonic::Status,
        >;
        /// PoolAccumulatorRewards returns the pool-global accumulator rewards.
        /// Contains spread factor rewards and uptime rewards.
        async fn pool_accumulator_rewards(
            &self,
            request: tonic::Request<super::PoolAccumulatorRewardsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PoolAccumulatorRewardsResponse>,
            tonic::Status,
        >;
        /// IncentiveRecords returns the incentive records for a given poolId
        async fn incentive_records(
            &self,
            request: tonic::Request<super::IncentiveRecordsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::IncentiveRecordsResponse>,
            tonic::Status,
        >;
        /// TickAccumulatorTrackers returns the tick accumulator trackers.
        /// Contains spread factor and uptime accumulator trackers.
        async fn tick_accumulator_trackers(
            &self,
            request: tonic::Request<super::TickAccumulatorTrackersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TickAccumulatorTrackersResponse>,
            tonic::Status,
        >;
        /// CFMMPoolIdLinkFromConcentratedPoolId returns the pool id of the CFMM
        /// pool that is linked with the given concentrated pool.
        async fn cfmm_pool_id_link_from_concentrated_pool_id(
            &self,
            request: tonic::Request<super::CfmmPoolIdLinkFromConcentratedPoolIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CfmmPoolIdLinkFromConcentratedPoolIdResponse>,
            tonic::Status,
        >;
        /// UserUnbondingPositions returns the position and lock info of unbonding
        /// positions of the given address.
        async fn user_unbonding_positions(
            &self,
            request: tonic::Request<super::UserUnbondingPositionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UserUnbondingPositionsResponse>,
            tonic::Status,
        >;
        /// GetTotalLiquidity returns total liquidity across all cl pools.
        async fn get_total_liquidity(
            &self,
            request: tonic::Request<super::GetTotalLiquidityRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTotalLiquidityResponse>,
            tonic::Status,
        >;
        /// NumNextInitializedTicks returns the provided number of next initialized
        /// ticks in the direction of swapping the token in denom.
        async fn num_next_initialized_ticks(
            &self,
            request: tonic::Request<super::NumNextInitializedTicksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::NumNextInitializedTicksResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct QueryServer<T: Query> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Query> QueryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryServer<T>
    where
        T: Query,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/osmosis.concentratedliquidity.v1beta1.Query/Pools" => {
                    #[allow(non_camel_case_types)]
                    struct PoolsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::PoolsRequest>
                    for PoolsSvc<T> {
                        type Response = super::PoolsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PoolsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::pools(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PoolsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/Params" => {
                    #[allow(non_camel_case_types)]
                    struct ParamsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::ParamsRequest>
                    for ParamsSvc<T> {
                        type Response = super::ParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ParamsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/UserPositions" => {
                    #[allow(non_camel_case_types)]
                    struct UserPositionsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::UserPositionsRequest>
                    for UserPositionsSvc<T> {
                        type Response = super::UserPositionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UserPositionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::user_positions(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UserPositionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/LiquidityPerTickRange" => {
                    #[allow(non_camel_case_types)]
                    struct LiquidityPerTickRangeSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::LiquidityPerTickRangeRequest>
                    for LiquidityPerTickRangeSvc<T> {
                        type Response = super::LiquidityPerTickRangeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LiquidityPerTickRangeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::liquidity_per_tick_range(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = LiquidityPerTickRangeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/LiquidityNetInDirection" => {
                    #[allow(non_camel_case_types)]
                    struct LiquidityNetInDirectionSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::LiquidityNetInDirectionRequest>
                    for LiquidityNetInDirectionSvc<T> {
                        type Response = super::LiquidityNetInDirectionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::LiquidityNetInDirectionRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::liquidity_net_in_direction(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = LiquidityNetInDirectionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/ClaimableSpreadRewards" => {
                    #[allow(non_camel_case_types)]
                    struct ClaimableSpreadRewardsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::ClaimableSpreadRewardsRequest>
                    for ClaimableSpreadRewardsSvc<T> {
                        type Response = super::ClaimableSpreadRewardsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ClaimableSpreadRewardsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::claimable_spread_rewards(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ClaimableSpreadRewardsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/ClaimableIncentives" => {
                    #[allow(non_camel_case_types)]
                    struct ClaimableIncentivesSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::ClaimableIncentivesRequest>
                    for ClaimableIncentivesSvc<T> {
                        type Response = super::ClaimableIncentivesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ClaimableIncentivesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::claimable_incentives(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ClaimableIncentivesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/PositionById" => {
                    #[allow(non_camel_case_types)]
                    struct PositionByIdSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::PositionByIdRequest>
                    for PositionByIdSvc<T> {
                        type Response = super::PositionByIdResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PositionByIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::position_by_id(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PositionByIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/PoolAccumulatorRewards" => {
                    #[allow(non_camel_case_types)]
                    struct PoolAccumulatorRewardsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::PoolAccumulatorRewardsRequest>
                    for PoolAccumulatorRewardsSvc<T> {
                        type Response = super::PoolAccumulatorRewardsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PoolAccumulatorRewardsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::pool_accumulator_rewards(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PoolAccumulatorRewardsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/IncentiveRecords" => {
                    #[allow(non_camel_case_types)]
                    struct IncentiveRecordsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::IncentiveRecordsRequest>
                    for IncentiveRecordsSvc<T> {
                        type Response = super::IncentiveRecordsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::IncentiveRecordsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::incentive_records(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = IncentiveRecordsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/TickAccumulatorTrackers" => {
                    #[allow(non_camel_case_types)]
                    struct TickAccumulatorTrackersSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::TickAccumulatorTrackersRequest>
                    for TickAccumulatorTrackersSvc<T> {
                        type Response = super::TickAccumulatorTrackersResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::TickAccumulatorTrackersRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::tick_accumulator_trackers(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = TickAccumulatorTrackersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/CFMMPoolIdLinkFromConcentratedPoolId" => {
                    #[allow(non_camel_case_types)]
                    struct CFMMPoolIdLinkFromConcentratedPoolIdSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        super::CfmmPoolIdLinkFromConcentratedPoolIdRequest,
                    > for CFMMPoolIdLinkFromConcentratedPoolIdSvc<T> {
                        type Response = super::CfmmPoolIdLinkFromConcentratedPoolIdResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::CfmmPoolIdLinkFromConcentratedPoolIdRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::cfmm_pool_id_link_from_concentrated_pool_id(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CFMMPoolIdLinkFromConcentratedPoolIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/UserUnbondingPositions" => {
                    #[allow(non_camel_case_types)]
                    struct UserUnbondingPositionsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::UserUnbondingPositionsRequest>
                    for UserUnbondingPositionsSvc<T> {
                        type Response = super::UserUnbondingPositionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UserUnbondingPositionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::user_unbonding_positions(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UserUnbondingPositionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/GetTotalLiquidity" => {
                    #[allow(non_camel_case_types)]
                    struct GetTotalLiquiditySvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::GetTotalLiquidityRequest>
                    for GetTotalLiquiditySvc<T> {
                        type Response = super::GetTotalLiquidityResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTotalLiquidityRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::get_total_liquidity(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetTotalLiquiditySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Query/NumNextInitializedTicks" => {
                    #[allow(non_camel_case_types)]
                    struct NumNextInitializedTicksSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::NumNextInitializedTicksRequest>
                    for NumNextInitializedTicksSvc<T> {
                        type Response = super::NumNextInitializedTicksResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::NumNextInitializedTicksRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::num_next_initialized_ticks(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = NumNextInitializedTicksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Query> Clone for QueryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Query> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Query> tonic::server::NamedService for QueryServer<T> {
        const NAME: &'static str = "osmosis.concentratedliquidity.v1beta1.Query";
    }
}
/// CreateConcentratedLiquidityPoolsProposal is a gov Content type for creating
/// concentrated liquidity pools. If a CreateConcentratedLiquidityPoolsProposal
/// passes, the pools are created via pool manager module account.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateConcentratedLiquidityPoolsProposal {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub pool_records: ::prost::alloc::vec::Vec<PoolRecord>,
}
impl ::prost::Name for CreateConcentratedLiquidityPoolsProposal {
    const NAME: &'static str = "CreateConcentratedLiquidityPoolsProposal";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.CreateConcentratedLiquidityPoolsProposal"
            .into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.CreateConcentratedLiquidityPoolsProposal"
            .into()
    }
}
/// TickSpacingDecreaseProposal is a gov Content type for proposing a tick
/// spacing decrease for a pool. The proposal will fail if one of the pools do
/// not exist, or if the new tick spacing is not less than the current tick
/// spacing.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TickSpacingDecreaseProposal {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub pool_id_to_tick_spacing_records: ::prost::alloc::vec::Vec<
        PoolIdToTickSpacingRecord,
    >,
}
impl ::prost::Name for TickSpacingDecreaseProposal {
    const NAME: &'static str = "TickSpacingDecreaseProposal";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.TickSpacingDecreaseProposal".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.TickSpacingDecreaseProposal".into()
    }
}
/// PoolIdToTickSpacingRecord is a struct that contains a pool id to new tick
/// spacing pair.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolIdToTickSpacingRecord {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    #[prost(uint64, tag = "2")]
    pub new_tick_spacing: u64,
}
impl ::prost::Name for PoolIdToTickSpacingRecord {
    const NAME: &'static str = "PoolIdToTickSpacingRecord";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.PoolIdToTickSpacingRecord".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.PoolIdToTickSpacingRecord".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolRecord {
    #[prost(string, tag = "1")]
    pub denom0: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub denom1: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub tick_spacing: u64,
    #[prost(string, tag = "5")]
    pub spread_factor: ::prost::alloc::string::String,
}
impl ::prost::Name for PoolRecord {
    const NAME: &'static str = "PoolRecord";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.PoolRecord".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.PoolRecord".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pool {
    /// pool's address holding all liquidity tokens.
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    /// address holding the incentives liquidity.
    #[prost(string, tag = "2")]
    pub incentives_address: ::prost::alloc::string::String,
    /// address holding spread rewards from swaps.
    #[prost(string, tag = "3")]
    pub spread_rewards_address: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub id: u64,
    /// Amount of total liquidity
    #[prost(string, tag = "5")]
    pub current_tick_liquidity: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub token0: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub token1: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub current_sqrt_price: ::prost::alloc::string::String,
    #[prost(int64, tag = "9")]
    pub current_tick: i64,
    /// tick_spacing must be one of the authorized_tick_spacing values set in the
    /// concentrated-liquidity parameters
    #[prost(uint64, tag = "10")]
    pub tick_spacing: u64,
    #[prost(int64, tag = "11")]
    pub exponent_at_price_one: i64,
    /// spread_factor is the ratio that is charged on the amount of token in.
    #[prost(string, tag = "12")]
    pub spread_factor: ::prost::alloc::string::String,
    /// last_liquidity_update is the last time either the pool liquidity or the
    /// active tick changed
    #[prost(message, optional, tag = "13")]
    pub last_liquidity_update: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for Pool {
    const NAME: &'static str = "Pool";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.Pool".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.Pool".into()
    }
}
/// ===================== MsgCreatePosition
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreatePosition {
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    #[prost(string, tag = "2")]
    pub sender: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub lower_tick: i64,
    #[prost(int64, tag = "4")]
    pub upper_tick: i64,
    /// tokens_provided is the amount of tokens provided for the position.
    /// It must at a minimum be of length 1 (for a single sided position)
    /// and at a maximum be of length 2 (for a position that straddles the current
    /// tick).
    #[prost(message, repeated, tag = "5")]
    pub tokens_provided: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    #[prost(string, tag = "6")]
    pub token_min_amount0: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub token_min_amount1: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgCreatePosition {
    const NAME: &'static str = "MsgCreatePosition";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgCreatePosition".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgCreatePosition".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreatePositionResponse {
    #[prost(uint64, tag = "1")]
    pub position_id: u64,
    #[prost(string, tag = "2")]
    pub amount0: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub amount1: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub liquidity_created: ::prost::alloc::string::String,
    /// the lower and upper tick are in the response because there are
    /// instances in which multiple ticks represent the same price, so
    /// we may move their provided tick to the canonical tick that represents
    /// the same price.
    #[prost(int64, tag = "6")]
    pub lower_tick: i64,
    #[prost(int64, tag = "7")]
    pub upper_tick: i64,
}
impl ::prost::Name for MsgCreatePositionResponse {
    const NAME: &'static str = "MsgCreatePositionResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgCreatePositionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgCreatePositionResponse".into()
    }
}
/// ===================== MsgAddToPosition
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgAddToPosition {
    #[prost(uint64, tag = "1")]
    pub position_id: u64,
    #[prost(string, tag = "2")]
    pub sender: ::prost::alloc::string::String,
    /// amount0 represents the amount of token0 willing to put in.
    #[prost(string, tag = "3")]
    pub amount0: ::prost::alloc::string::String,
    /// amount1 represents the amount of token1 willing to put in.
    #[prost(string, tag = "4")]
    pub amount1: ::prost::alloc::string::String,
    /// token_min_amount0 represents the minimum amount of token0 desired from the
    /// new position being created. Note that this field indicates the min amount0
    /// corresponding to the liquidity that is being added, not the total
    /// liquidity of the position.
    #[prost(string, tag = "5")]
    pub token_min_amount0: ::prost::alloc::string::String,
    /// token_min_amount1 represents the minimum amount of token1 desired from the
    /// new position being created. Note that this field indicates the min amount1
    /// corresponding to the liquidity that is being added, not the total
    /// liquidity of the position.
    #[prost(string, tag = "6")]
    pub token_min_amount1: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgAddToPosition {
    const NAME: &'static str = "MsgAddToPosition";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgAddToPosition".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgAddToPosition".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgAddToPositionResponse {
    #[prost(uint64, tag = "1")]
    pub position_id: u64,
    #[prost(string, tag = "2")]
    pub amount0: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub amount1: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgAddToPositionResponse {
    const NAME: &'static str = "MsgAddToPositionResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgAddToPositionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgAddToPositionResponse".into()
    }
}
/// ===================== MsgWithdrawPosition
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawPosition {
    #[prost(uint64, tag = "1")]
    pub position_id: u64,
    #[prost(string, tag = "2")]
    pub sender: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub liquidity_amount: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgWithdrawPosition {
    const NAME: &'static str = "MsgWithdrawPosition";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgWithdrawPosition".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgWithdrawPosition".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgWithdrawPositionResponse {
    #[prost(string, tag = "1")]
    pub amount0: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub amount1: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgWithdrawPositionResponse {
    const NAME: &'static str = "MsgWithdrawPositionResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgWithdrawPositionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgWithdrawPositionResponse".into()
    }
}
/// ===================== MsgCollectSpreadRewards
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCollectSpreadRewards {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub position_ids: ::prost::alloc::vec::Vec<u64>,
    #[prost(string, tag = "2")]
    pub sender: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgCollectSpreadRewards {
    const NAME: &'static str = "MsgCollectSpreadRewards";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewards".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewards".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCollectSpreadRewardsResponse {
    #[prost(message, repeated, tag = "1")]
    pub collected_spread_rewards: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for MsgCollectSpreadRewardsResponse {
    const NAME: &'static str = "MsgCollectSpreadRewardsResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewardsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewardsResponse".into()
    }
}
/// ===================== MsgCollectIncentives
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCollectIncentives {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub position_ids: ::prost::alloc::vec::Vec<u64>,
    #[prost(string, tag = "2")]
    pub sender: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgCollectIncentives {
    const NAME: &'static str = "MsgCollectIncentives";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgCollectIncentives".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgCollectIncentives".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCollectIncentivesResponse {
    #[prost(message, repeated, tag = "1")]
    pub collected_incentives: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
    #[prost(message, repeated, tag = "2")]
    pub forfeited_incentives: ::prost::alloc::vec::Vec<
        super::super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for MsgCollectIncentivesResponse {
    const NAME: &'static str = "MsgCollectIncentivesResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgCollectIncentivesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgCollectIncentivesResponse".into()
    }
}
/// ===================== MsgFungifyChargedPositions
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgFungifyChargedPositions {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub position_ids: ::prost::alloc::vec::Vec<u64>,
    #[prost(string, tag = "2")]
    pub sender: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgFungifyChargedPositions {
    const NAME: &'static str = "MsgFungifyChargedPositions";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositions".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositions".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgFungifyChargedPositionsResponse {
    #[prost(uint64, tag = "1")]
    pub new_position_id: u64,
}
impl ::prost::Name for MsgFungifyChargedPositionsResponse {
    const NAME: &'static str = "MsgFungifyChargedPositionsResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositionsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositionsResponse"
            .into()
    }
}
/// ===================== MsgTransferPositions
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgTransferPositions {
    #[prost(uint64, repeated, packed = "false", tag = "1")]
    pub position_ids: ::prost::alloc::vec::Vec<u64>,
    #[prost(string, tag = "2")]
    pub sender: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub new_owner: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgTransferPositions {
    const NAME: &'static str = "MsgTransferPositions";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgTransferPositions".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgTransferPositions".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgTransferPositionsResponse {}
impl ::prost::Name for MsgTransferPositionsResponse {
    const NAME: &'static str = "MsgTransferPositionsResponse";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.MsgTransferPositionsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.MsgTransferPositionsResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "osmosis")]
pub mod msg_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn create_position(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCreatePosition>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCreatePositionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Msg/CreatePosition",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Msg",
                        "CreatePosition",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn withdraw_position(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgWithdrawPosition>,
        ) -> std::result::Result<
            tonic::Response<super::MsgWithdrawPositionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Msg/WithdrawPosition",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Msg",
                        "WithdrawPosition",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// AddToPosition attempts to add amount0 and amount1 to a position
        /// with the given position id.
        /// To maintain backwards-compatibility with future implementations of
        /// charging, this function deletes the old position and creates a new one with
        /// the resulting amount after addition.
        pub async fn add_to_position(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgAddToPosition>,
        ) -> std::result::Result<
            tonic::Response<super::MsgAddToPositionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Msg/AddToPosition",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Msg",
                        "AddToPosition",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn collect_spread_rewards(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCollectSpreadRewards>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCollectSpreadRewardsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Msg/CollectSpreadRewards",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Msg",
                        "CollectSpreadRewards",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn collect_incentives(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCollectIncentives>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCollectIncentivesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Msg/CollectIncentives",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Msg",
                        "CollectIncentives",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// TransferPositions transfers ownership of a set of one or more positions
        /// from a sender to a recipient.
        pub async fn transfer_positions(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgTransferPositions>,
        ) -> std::result::Result<
            tonic::Response<super::MsgTransferPositionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/osmosis.concentratedliquidity.v1beta1.Msg/TransferPositions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "osmosis.concentratedliquidity.v1beta1.Msg",
                        "TransferPositions",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "osmosis")]
pub mod msg_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MsgServer.
    #[async_trait]
    pub trait Msg: Send + Sync + 'static {
        async fn create_position(
            &self,
            request: tonic::Request<super::MsgCreatePosition>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCreatePositionResponse>,
            tonic::Status,
        >;
        async fn withdraw_position(
            &self,
            request: tonic::Request<super::MsgWithdrawPosition>,
        ) -> std::result::Result<
            tonic::Response<super::MsgWithdrawPositionResponse>,
            tonic::Status,
        >;
        /// AddToPosition attempts to add amount0 and amount1 to a position
        /// with the given position id.
        /// To maintain backwards-compatibility with future implementations of
        /// charging, this function deletes the old position and creates a new one with
        /// the resulting amount after addition.
        async fn add_to_position(
            &self,
            request: tonic::Request<super::MsgAddToPosition>,
        ) -> std::result::Result<
            tonic::Response<super::MsgAddToPositionResponse>,
            tonic::Status,
        >;
        async fn collect_spread_rewards(
            &self,
            request: tonic::Request<super::MsgCollectSpreadRewards>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCollectSpreadRewardsResponse>,
            tonic::Status,
        >;
        async fn collect_incentives(
            &self,
            request: tonic::Request<super::MsgCollectIncentives>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCollectIncentivesResponse>,
            tonic::Status,
        >;
        /// TransferPositions transfers ownership of a set of one or more positions
        /// from a sender to a recipient.
        async fn transfer_positions(
            &self,
            request: tonic::Request<super::MsgTransferPositions>,
        ) -> std::result::Result<
            tonic::Response<super::MsgTransferPositionsResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct MsgServer<T: Msg> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Msg> MsgServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MsgServer<T>
    where
        T: Msg,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/osmosis.concentratedliquidity.v1beta1.Msg/CreatePosition" => {
                    #[allow(non_camel_case_types)]
                    struct CreatePositionSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgCreatePosition>
                    for CreatePositionSvc<T> {
                        type Response = super::MsgCreatePositionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgCreatePosition>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::create_position(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreatePositionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Msg/WithdrawPosition" => {
                    #[allow(non_camel_case_types)]
                    struct WithdrawPositionSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgWithdrawPosition>
                    for WithdrawPositionSvc<T> {
                        type Response = super::MsgWithdrawPositionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgWithdrawPosition>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::withdraw_position(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = WithdrawPositionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Msg/AddToPosition" => {
                    #[allow(non_camel_case_types)]
                    struct AddToPositionSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgAddToPosition>
                    for AddToPositionSvc<T> {
                        type Response = super::MsgAddToPositionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgAddToPosition>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::add_to_position(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AddToPositionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Msg/CollectSpreadRewards" => {
                    #[allow(non_camel_case_types)]
                    struct CollectSpreadRewardsSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgCollectSpreadRewards>
                    for CollectSpreadRewardsSvc<T> {
                        type Response = super::MsgCollectSpreadRewardsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgCollectSpreadRewards>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::collect_spread_rewards(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CollectSpreadRewardsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Msg/CollectIncentives" => {
                    #[allow(non_camel_case_types)]
                    struct CollectIncentivesSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgCollectIncentives>
                    for CollectIncentivesSvc<T> {
                        type Response = super::MsgCollectIncentivesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgCollectIncentives>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::collect_incentives(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CollectIncentivesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/osmosis.concentratedliquidity.v1beta1.Msg/TransferPositions" => {
                    #[allow(non_camel_case_types)]
                    struct TransferPositionsSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgTransferPositions>
                    for TransferPositionsSvc<T> {
                        type Response = super::MsgTransferPositionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgTransferPositions>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::transfer_positions(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = TransferPositionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Msg> Clone for MsgServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Msg> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Msg> tonic::server::NamedService for MsgServer<T> {
        const NAME: &'static str = "osmosis.concentratedliquidity.v1beta1.Msg";
    }
}
/// FullTick contains tick index and pool id along with other tick model
/// information.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FullTick {
    /// pool id associated with the tick.
    #[prost(uint64, tag = "1")]
    pub pool_id: u64,
    /// tick's index.
    #[prost(int64, tag = "2")]
    pub tick_index: i64,
    /// tick's info.
    #[prost(message, optional, tag = "3")]
    pub info: ::core::option::Option<TickInfo>,
}
impl ::prost::Name for FullTick {
    const NAME: &'static str = "FullTick";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.FullTick".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.FullTick".into()
    }
}
/// PoolData represents a serialized pool along with its ticks
/// for genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolData {
    /// pool struct
    #[prost(message, optional, tag = "1")]
    pub pool: ::core::option::Option<::prost_types::Any>,
    /// pool's ticks
    #[prost(message, repeated, tag = "2")]
    pub ticks: ::prost::alloc::vec::Vec<FullTick>,
    #[prost(message, optional, tag = "3")]
    pub spread_reward_accumulator: ::core::option::Option<AccumObject>,
    #[prost(message, repeated, tag = "4")]
    pub incentives_accumulators: ::prost::alloc::vec::Vec<AccumObject>,
    /// incentive records to be set
    #[prost(message, repeated, tag = "5")]
    pub incentive_records: ::prost::alloc::vec::Vec<IncentiveRecord>,
}
impl ::prost::Name for PoolData {
    const NAME: &'static str = "PoolData";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.PoolData".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.PoolData".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PositionData {
    #[prost(message, optional, tag = "1")]
    pub position: ::core::option::Option<Position>,
    #[prost(uint64, tag = "2")]
    pub lock_id: u64,
    #[prost(message, optional, tag = "3")]
    pub spread_reward_accum_record: ::core::option::Option<
        super::super::accum::v1beta1::Record,
    >,
    #[prost(message, repeated, tag = "4")]
    pub uptime_accum_records: ::prost::alloc::vec::Vec<
        super::super::accum::v1beta1::Record,
    >,
}
impl ::prost::Name for PositionData {
    const NAME: &'static str = "PositionData";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.PositionData".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.PositionData".into()
    }
}
/// GenesisState defines the concentrated liquidity module's genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// params are all the parameters of the module
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<super::Params>,
    /// pool data containing serialized pool struct and ticks.
    #[prost(message, repeated, tag = "2")]
    pub pool_data: ::prost::alloc::vec::Vec<PoolData>,
    #[prost(message, repeated, tag = "3")]
    pub position_data: ::prost::alloc::vec::Vec<PositionData>,
    #[prost(uint64, tag = "4")]
    pub next_position_id: u64,
    #[prost(uint64, tag = "5")]
    pub next_incentive_record_id: u64,
    #[prost(uint64, tag = "6")]
    pub incentives_accumulator_pool_id_migration_threshold: u64,
    #[prost(uint64, tag = "7")]
    pub spread_factor_pool_id_migration_threshold: u64,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.GenesisState".into()
    }
}
/// In original struct of Accum object, store.KVStore is stored together.
/// For handling genesis, we do not need to include store.KVStore since we use
/// CL module's KVStore.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccumObject {
    /// Accumulator's name (pulled from AccumulatorContent)
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub accum_content: ::core::option::Option<
        super::super::accum::v1beta1::AccumulatorContent,
    >,
}
impl ::prost::Name for AccumObject {
    const NAME: &'static str = "AccumObject";
    const PACKAGE: &'static str = "osmosis.concentratedliquidity.v1beta1";
    fn full_name() -> ::prost::alloc::string::String {
        "osmosis.concentratedliquidity.v1beta1.AccumObject".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/osmosis.concentratedliquidity.v1beta1.AccumObject".into()
    }
}
